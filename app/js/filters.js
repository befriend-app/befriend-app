befriend.filters = {
    data: {
        filters: null,
        collapsed: {},
    },
    init: function () {
        return new Promise(async (resolve, reject) => {
            try {
                if (befriend.user.local.data?.filters?.collapsed) {
                    this.data.collapsed = befriend.user.local.data.filters.collapsed;
                }

                befriend.filters.initSections();
                befriend.filters.initCollapsible();

                befriend.filters.availability.init();
                befriend.filters.modes.init();
                befriend.filters.reviews.init();
                befriend.filters.age.init();
                befriend.filters.genders.init();
                befriend.filters.distance.init();
                befriend.filters.activity_types.init();

                befriend.filters.initSendReceive();
                befriend.filters.initActiveEvents();

                befriend.filters.setActive();
                befriend.filters.setSendReceive();
            } catch (e) {
                console.error(e);
            }
            resolve();
        });
    },
    sections: {
        availability: {
            token: 'availability',
            name: 'Availability',
            icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M138.6667,320h-64c-5.888,0-10.6667-4.7787-10.6667-10.6667v-64c0-5.888,4.7787-10.6667,10.6667-10.6667h64c5.888,0,10.6667,4.7787,10.6667,10.6667v64c0,5.888-4.7787,10.6667-10.6667,10.6667ZM85.3333,298.6667h42.6667v-42.6667h-42.6667v42.6667Z"/><path d="M138.6667,448h-64c-5.888,0-10.6667-4.7787-10.6667-10.6667v-64c0-5.888,4.7787-10.6667,10.6667-10.6667h64c5.888,0,10.6667,4.7787,10.6667,10.6667v64c0,5.888-4.7787,10.6667-10.6667,10.6667ZM85.3333,426.6667h42.6667v-42.6667h-42.6667v42.6667Z"/><path d="M288,320h-64c-5.888,0-10.6667-4.7787-10.6667-10.6667v-64c0-5.888,4.7787-10.6667,10.6667-10.6667h64c5.888,0,10.6667,4.7787,10.6667,10.6667v64c0,5.888-4.7787,10.6667-10.6667,10.6667ZM234.6667,298.6667h42.6667v-42.6667h-42.6667v42.6667Z"/><path d="M288,448h-64c-5.888,0-10.6667-4.7787-10.6667-10.6667v-64c0-5.888,4.7787-10.6667,10.6667-10.6667h64c5.888,0,10.6667,4.7787,10.6667,10.6667v64c0,5.888-4.7787,10.6667-10.6667,10.6667ZM234.6667,426.6667h42.6667v-42.6667h-42.6667v42.6667Z"/><path d="M437.3333,320h-64c-5.888,0-10.6667-4.7787-10.6667-10.6667v-64c0-5.888,4.7787-10.6667,10.6667-10.6667h64c5.888,0,10.6667,4.7787,10.6667,10.6667v64c0,5.888-4.7787,10.6667-10.6667,10.6667ZM384,298.6667h42.6667v-42.6667h-42.6667v42.6667Z"/><path d="M458.6667,512H53.3333c-29.3973,0-53.3333-23.936-53.3333-53.3333V96c0-29.3973,23.936-53.3333,53.3333-53.3333h405.3333c29.3973,0,53.3333,23.936,53.3333,53.3333v362.6667c0,29.3973-23.936,53.3333-53.3333,53.3333ZM53.3333,64c-17.6427,0-32,14.3573-32,32v362.6667c0,17.6427,14.3573,32,32,32h405.3333c17.6427,0,32-14.3573,32-32V96c0-17.6427-14.3573-32-32-32H53.3333Z"/><path d="M501.3333,192H10.6667c-5.888,0-10.6667-4.7787-10.6667-10.6667s4.7787-10.6667,10.6667-10.6667h490.6667c5.888,0,10.6667,4.7787,10.6667,10.6667s-4.7787,10.6667-10.6667,10.6667Z"/><path d="M117.3333,106.6667c-5.888,0-10.6667-4.7787-10.6667-10.6667V10.6667c0-5.888,4.7787-10.6667,10.6667-10.6667s10.6667,4.7787,10.6667,10.6667v85.3333c0,5.888-4.7787,10.6667-10.6667,10.6667Z"/><path d="M394.6667,106.6667c-5.888,0-10.6667-4.7787-10.6667-10.6667V10.6667c0-5.888,4.7787-10.6667,10.6667-10.6667s10.6667,4.7787,10.6667,10.6667v85.3333c0,5.888-4.7787,10.6667-10.6667,10.6667Z"/></svg>`
        },
        modes: {
            token: 'modes',
            name: 'Modes',
            icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 469.976 374.017">
                    <path class="outline" d="M197.396,258.637l-33.524-6.472c.032-.676.104-1.348.104-2.032v-20.844c19.9322-11.3726,34.5883-30.1323,40.8-52.224,16.9671-2.0638,29.0486-17.4913,26.9848-34.4583-1.0477-8.6131-5.6629-16.3909-12.7208-21.4377l1.012-15.344C223.6666,51.1135,182.2443,3.8308,127.5327.2163c-29.6844-1.9611-58.6839,9.4926-79.0167,31.2088-18.8774,19.9906-28.5213,46.9727-26.592,74.4l1.012,15.344c-13.9034,9.9415-17.1152,29.2717-7.1737,43.1752,5.0467,7.058,12.8245,11.6732,21.4377,12.7208,6.2117,22.0917,20.8678,40.8514,40.8,52.224v20.844c0,.684.072,1.356.104,2.032l-33.528,6.472C18.7156,263.6609.0331,286.2932,0,312.637v54.38c.0022,3.8557,3.1203,6.9846,6.976,7h228c3.8651-.0022,6.9978-3.1349,7-7v-54.376c-.0315-26.3466-18.7166-48.9815-44.58-54.004ZM207.572,161.985c.26-2.724.4-5.484.4-8.28v-22.836c8.5444,3.8486,12.3511,13.8952,8.5024,22.4396-1.7631,3.9142-4.9442,7.0146-8.9024,8.6764h0ZM35.884,104.901c-3.0886-46.9975,32.5066-87.6002,79.5041-90.6888,25.4863-1.6749,50.3816,8.1617,67.8399,26.8048,16.2122,17.1684,24.4953,40.3407,22.84,63.896l-.692,10.756c-.9707-.1387-1.9547-.2307-2.952-.276-19.696-6.748-36-26.552-36.16-26.752-2.1433-2.6336-5.8656-3.3532-8.836-1.708-53.116,29.528-115.656,28.4-116.268,28.4-1.5244-.0167-3.0474.0984-4.552.344l-.724-10.776ZM23.976,146.321c.0157-6.6657,3.9255-12.7073,10-15.452v22.836c0,2.8.144,5.556.4,8.28-6.2971-2.6598-10.3926-8.8282-10.4-15.664ZM47.976,153.705v-24.44c18-.504,66.368-4.116,111.272-27.428,9.7588,10.693,21.5691,19.3134,34.728,25.348v26.52c0,40.3168-32.6832,73-73,73s-73-32.6832-73-73ZM120.976,240.705c9.8805.0048,19.6889-1.6823,29-4.988v14.4c0,16.0163-12.9837,29-29,29s-29-12.9837-29-29v-14.4c9.3111,3.3058,19.1195,4.9928,29,4.988ZM227.976,360.017H13.976v-47.376c.024-19.6404,13.9521-36.5141,33.232-40.26l33.788-6.52c8.6524,22.0804,33.5663,32.9658,55.6466,24.3134,11.1371-4.3642,19.9491-13.1762,24.3134-24.3134l33.788,6.52c19.2799,3.7459,33.208,20.6196,33.232,40.26v47.376Z M429.704,269.905l-13.396-2.588,15.452-1.368c16.2248-1.468,28.5575-15.2238,28.252-31.512l-2-99.964c-1.1376-53.2281-45.2097-95.4558-98.4378-94.3182-51.6266,1.1034-93.2148,42.6916-94.3182,94.3182l-2,99.968c-.2635,16.2755,12.0554,30.0066,28.264,31.504l15.456,1.372-13.412,2.588c-23.3664,4.5435-40.2448,24.996-40.272,48.8v48.312c.0022,3.8651,3.1349,6.9978,7,7h202.684c3.8651-.0022,6.9978-3.1349,7-7v-48.32c-.0311-23.801-16.9085-44.2491-40.272-48.792ZM361.64,241.5051c-35.3807-.0418-64.0551-28.7073-64.108-64.088v-23.068c11.4219-5.3275,21.695-12.8315,30.244-22.092,39.284,20.24,81.42,23.652,97.964,24.18v20.98c-.0463,35.3823-28.7177,64.0537-64.1,64.1v-.012ZM336.656,251.345c16.2012,5.5708,33.7988,5.5708,50,0v11.792c0,13.8071-11.1929,25-25,25s-25-11.1929-25-25v-11.792ZM277.252,234.7171l2-99.956c.9511-45.4983,38.6058-81.611,84.1041-80.6599,44.1592.9231,79.7368,36.5007,80.6599,80.6599l2,99.976c.1641,8.9305-6.6001,16.4699-15.496,17.272l-29.864,2.644v-9.6801c24.1594-13.9227,39.061-39.672,39.096-67.556v-27.908c.0003-1.8871-.7612-3.6943-2.112-5.012-1.3415-1.3316-3.1706-2.0545-5.06-2-.568.036-55.792,1.08-102.944-25.136-2.9692-1.6478-6.6925-.9297-8.836,1.704-.148.18-14.856,18.068-32.432,23.772-2.8839.9388-4.836,3.6271-4.836,6.66v27.92c.035,27.8955,14.9489,53.6535,39.124,67.572v9.66l-29.896-2.644c-8.8928-.8246-15.6507-8.3582-15.508-17.288ZM455.976,360.017h-188.68v-41.32c.0235-17.0948,12.1441-31.7817,28.924-35.048l29.388-5.664c8.1882,19.9077,30.9645,29.4081,50.8721,21.2199,9.6219-3.9576,17.2623-11.5979,21.2199-21.2199l29.348,5.664c16.7815,3.2646,28.9041,17.9519,28.928,35.048v41.32Z"></path>
                </svg>`
        },
        reviews: {
            token: 'reviews',
            name: 'Reviews',
            icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 29 28.9766"><defs><style>.reviews-icon-cls1{fill-rule:evenodd;}</style></defs><path class="reviews-icon-cls1" d="M25.2466,13.9834c-.272.0459-.4556.3037-.4097.5762.1084.6406.1631,1.2852.1631,1.917,0,3.5242-1.5708,6.7053-4.1017,8.8234-.442-2.8699-2.4796-5.1718-5.1854-5.9955,1.0757-.7176,1.787-1.9402,1.787-3.3279,0-2.2061-1.7944-4-4-4s-4,1.7939-4,4c0,1.3877.7113,2.6104,1.787,3.3279-2.7057.8237-4.7433,3.1255-5.1854,5.9955-2.5309-2.1181-4.1017-5.2992-4.1017-8.8234,0-.6318.0547-1.2764.1631-1.917.0459-.2725-.1377-.5303-.4097-.5762-.2783-.0469-.5303.1377-.5767.4102-.1172.6943-.1768,1.3955-.1768,2.083,0,6.1406,4.3857,11.3232,10.4282,12.3232.0273.0049.0552.0068.082.0068.2402,0,.4521-.1738.4927-.418.0454-.2725-.1392-.5303-.4116-.5752-1.6849-.2789-3.2263-.9159-4.5611-1.8195.2412-3.3932,3.0299-6.0174,6.4698-6.0174s6.2286,2.6242,6.4698,6.0174c-1.3348.9036-2.8762,1.5406-4.5611,1.8195-.2725.0449-.457.3027-.4116.5752.0405.2441.2524.418.4927.418.0269,0,.0547-.002.082-.0068,6.0425-1,10.4282-6.1826,10.4282-12.3232,0-.6875-.0596-1.3887-.1768-2.083-.0464-.2725-.3013-.458-.5767-.4102ZM10.5,15.9766c0-1.6543,1.3457-3,3-3s3,1.3457,3,3-1.3457,3-3,3-3-1.3457-3-3Z"/><path class="reviews-icon-cls1" d="M18.9756,3.9551c-.0591-.1816-.2153-.3135-.4038-.3408l-3.1948-.4639-1.4287-2.8955c-.168-.3398-.7285-.3398-.8965,0l-1.4287,2.8955-3.1948.4639c-.1885.0273-.3447.1592-.4038.3408-.0586.1807-.0098.3799.1265.5127l2.312,2.2529-.5459,3.1816c-.0322.1885.0449.3779.1987.4893.1548.1123.3584.1289.5269.0381l2.8574-1.5029,2.8574,1.5029c.0732.0391.1533.0576.2329.0576.1035,0,.2065-.0322.2939-.0957.1538-.1113.231-.3008.1987-.4893l-.5459-3.1816,2.312-2.2529c.1362-.1328.1851-.332.1265-.5127ZM15.6509,6.1875c-.1177.1152-.1714.2803-.1436.4434l.4189,2.4424-2.1934-1.1533c-.0732-.0381-.1528-.0576-.2329-.0576s-.1597.0195-.2329.0576l-2.1934,1.1533.4189-2.4424c.0278-.1631-.0259-.3281-.1436-.4434l-1.7744-1.7285,2.4521-.3564c.1631-.0244.3037-.126.3765-.2734l1.0967-2.2227,1.0967,2.2227c.0728.1475.2134.249.3765.2734l2.4521.3564-1.7744,1.7285Z"/><path class="reviews-icon-cls1" d="M1.5351,12c-.0322.1885.0449.3779.1987.4893.1553.1123.3594.1279.5269.0381l2.2393-1.1777,2.2393,1.1777c.0732.0391.1533.0576.2329.0576.1035,0,.2065-.0322.2939-.0957.1538-.1113.231-.3008.1987-.4893l-.4277-2.4932,1.812-1.7656c.1362-.1328.1851-.332.1265-.5127-.0591-.1816-.2153-.3135-.4038-.3408l-2.5039-.3633-1.1196-2.2695c-.168-.3398-.7285-.3398-.8965,0l-1.1196,2.2695-2.5039.3633c-.1885.0273-.3447.1592-.4038.3408-.0586.1807-.0098.3799.1265.5127l1.812,1.7656-.4277,2.4932ZM1.5747,7.7324l1.7612-.2559c.1631-.0244.3037-.126.3765-.2734l.7876-1.5967.7876,1.5967c.0728.1475.2134.249.3765.2734l1.7612.2559-1.2744,1.2412c-.1177.1152-.1714.2803-.1436.4434l.3008,1.7539-1.5752-.8281c-.0732-.0381-.1528-.0576-.2329-.0576s-.1597.0195-.2329.0576l-1.5752.8281.3008-1.7539c.0278-.1631-.0259-.3281-.1436-.4434l-1.2744-1.2412Z"/><path class="reviews-icon-cls1" d="M26.5718,6.8877l-2.5039-.3633-1.1196-2.2695c-.168-.3398-.7285-.3398-.8965,0l-1.1196,2.2695-2.5039.3633c-.1885.0273-.3447.1592-.4038.3408-.0586.1807-.0098.3799.1265.5127l1.812,1.7656-.4277,2.4932c-.0322.1885.0449.3779.1987.4893.1548.1123.3584.1279.5269.0381l2.2393-1.1777,2.2393,1.1777c.0732.0391.1533.0576.2329.0576.1035,0,.2065-.0322.2939-.0957.1538-.1113.231-.3008.1987-.4893l-.4277-2.4932,1.812-1.7656c.1362-.1328.1851-.332.1265-.5127-.0591-.1816-.2153-.3135-.4038-.3408ZM24.1509,8.9736c-.1177.1152-.1714.2803-.1436.4434l.3008,1.7539-1.5752-.8281c-.0732-.0381-.1528-.0576-.2329-.0576s-.1597.0195-.2329.0576l-1.5752.8281.3008-1.7539c.0278-.1631-.0259-.3281-.1436-.4434l-1.2744-1.2412,1.7612-.2559c.1631-.0244.3037-.126.3765-.2734l.7876-1.5967.7876,1.5967c.0728.1475.2134.249.3765.2734l1.7612.2559-1.2744,1.2412Z"/><circle cx="13.5" cy="28.4766" r=".5"/></svg>`
        },
        ages: {
            token: 'ages',
            name: 'Age',
            icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 433.2848 484.2606"><path d="M389.6874,441.4878H37.5974c-3.8212,0-6.9189-3.0977-6.9189-6.9189v-150.8947c0-3.8212,3.0977-6.9189,6.9189-6.9189s6.9189,3.0977,6.9189,6.9189v143.9758h338.2521v-143.9758c0-3.8212,3.0977-6.9189,6.9189-6.9189s6.9189,3.0977,6.9189,6.9189v150.8947c0,3.8212-3.0977,6.9189-6.9189,6.9189Z"/><path d="M235.6515,189.9989c-3.8212,0-6.9189-3.0977-6.9189-6.9189v-87.0123h-30.1803v87.0123c0,3.8212-3.0977,6.9189-6.9189,6.9189s-6.9189-3.0977-6.9189-6.9189v-87.6627c.0076-7.2915,5.9167-13.2006,13.2082-13.2082h31.4326c7.2942.0038,13.2075,5.914,13.2151,13.2082v87.6627c0,3.8212-3.0977,6.9189-6.9189,6.9189Z"/><path d="M213.6424,76.8262c-13.9946-.0152-25.3357-11.3563-25.3509-25.3509,0-11.0703,14.7304-39.597,19.2415-48.0865,2.1068-3.3741,6.5501-4.4015,9.9242-2.2946.9294.5804,1.7142,1.3652,2.2946,2.2946,4.5111,8.4895,19.2415,37.0439,19.2415,48.0865-.0153,13.9946-11.3563,25.3356-25.3509,25.3509ZM213.6424,21.9246c-5.104,9.3088-8.9742,19.2425-11.5131,29.5507.0048,6.3585,5.1633,11.5092,11.5218,11.5044,6.3517-.0048,11.4996-5.1527,11.5044-11.5044-2.5388-10.3082-6.4091-20.2419-11.5131-29.5507Z"/><path d="M213.6424,96.1092c-3.8212,0-6.9189-3.0977-6.9189-6.9189v-19.283c0-3.8212,3.0977-6.9189,6.9189-6.9189s6.9189,3.0977,6.9189,6.9189v19.283c0,3.8212-3.0977,6.9189-6.9189,6.9189Z"/><path d="M280.7559,290.5931c-13.8526.1544-27.2732-4.8185-37.6804-13.9624-16.7421-14.924-42.0134-14.924-58.7555,0-21.6794,18.6154-53.7022,18.6154-75.3816,0-16.7603-14.9319-42.0506-14.9319-58.8108,0-6.0497,5.0154-12.9482,8.9075-20.3693,11.4923-5.6912,1.7797-11.8893.7527-16.7023-2.7676-4.7582-3.4634-7.5596-9.0044-7.5278-14.8895v-55.9533c.0267-21.1726,17.1859-38.3287,38.3585-38.3516h339.5114c21.1726.0229,38.3318,17.1789,38.3585,38.3516v55.9533c.0281,5.891-2.7814,11.4354-7.5486,14.8964-4.7969,3.552-11.0089,4.5818-16.6954,2.7676-7.4116-2.584-14.3007-6.4738-20.3416-11.4854-16.7342-14.917-41.9936-14.917-58.7278,0-10.411,9.1404-23.8341,14.1085-37.6873,13.9485ZM213.6908,251.605c13.8526-.1544,27.2732,4.8185,37.6804,13.9624,16.7456,14.9219,42.0168,14.9219,58.7624,0,21.6638-18.6152,53.6763-18.6152,75.3401,0,4.8033,4.0515,10.2874,7.2188,16.1972,9.3544,1.4777.4809,3.0963.2236,4.352-.6919,1.2053-.8632,1.9131-2.2607,1.8958-3.7431v-55.9741c-.0191-13.5333-10.9873-24.4985-24.5206-24.5137H43.8867c-13.5334.0152-24.5016,10.9804-24.5206,24.5137v55.9533c-.0131,1.4779.6909,2.8706,1.8889,3.7362,1.259.92,2.884,1.1775,4.3658.6919,5.92-2.1349,11.4137-5.3046,16.2249-9.3613,10.4118-9.1453,23.8372-14.1183,37.6943-13.9624,13.8571-.1559,27.2825,4.817,37.6943,13.9624,16.7478,14.9229,42.0215,14.9229,58.7693,0,10.4147-9.1318,23.8371-14.0921,37.6873-13.9278Z"/><path d="M389.6874,375.4744c-14.3104.1994-28.2237-4.7066-39.2441-13.8378-18.0802-15.0518-44.3284-15.0518-62.4087,0-22.8872,18.4852-55.5733,18.4852-78.4605,0-18.0659-15.0482-44.3013-15.0482-62.3671,0-11.0167,9.1282-24.9246,14.0339-39.2303,13.8378-14.3022.2001-28.207-4.7063-39.2164-13.8378-8.6599-7.452-19.7533-11.4674-31.1767-11.2848-3.8212,0-6.9189-3.0977-6.9189-6.9189s3.0977-6.9189,6.9189-6.9189c14.3022-.2001,28.207,4.7063,39.2164,13.8378,18.0659,15.0482,44.3013,15.0482,62.3671,0,22.8828-18.483,55.5639-18.483,78.4467,0,18.0713,15.0476,44.3097,15.0476,62.381,0,22.8979-18.4843,55.5903-18.4843,78.4882,0,8.6684,7.4561,19.7719,11.4716,31.2043,11.2848,3.8212,0,6.9189,3.0977,6.9189,6.9189s-3.0977,6.9189-6.9189,6.9189Z"/><path d="M420.3658,484.2606H6.9189c-3.8212,0-6.9189-3.0977-6.9189-6.9189v-28.5129c.0114-11.692,9.4868-21.1674,21.1788-21.1788h384.9271c11.692.0115,21.1673,9.4868,21.1788,21.1788v28.5129c0,3.8212-3.0977,6.9189-6.9189,6.9189ZM13.8378,470.4227h399.6091v-21.594c-.0038-4.0527-3.2882-7.3372-7.341-7.341H21.1788c-4.0527.0038-7.3371,3.2882-7.341,7.341v21.594Z"/></svg>`
        },
        genders: {
            token: 'genders',
            name: 'Gender',
            icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 495.114 512.0002"><path d="M454.451,247.8192h-.073c-13.284,0-24.795,7.735-30.268,18.937l-45.856-45.857c17.131-27.83,24.362-61.106,20.364-93.722-4.077-33.256-19.752-64.327-44.138-87.49C327.157,13.7342,291.226-.3898,253.256.0082c-37.944.367-73.621,15.142-100.462,41.604-10.967,10.813-19.99,23.062-26.911,36.323C55.163,85.8582,0,146.0072,0,218.8132c0,32.31,11.16,63.918,31.423,89.001,2.604,3.224,7.329,3.728,10.556,1.122,3.225-2.605,3.728-7.331,1.122-10.556-18.113-22.421-28.088-50.678-28.088-79.567,0-62.004,44.747-113.739,103.639-124.638-4.224,11.334-7.025,23.223-8.298,35.451-36.733,12.982-63.124,48.058-63.124,89.187,0,52.13,42.411,94.54,94.539,94.54,27.254,0,51.841-11.602,69.109-30.114,9.004,2.857,18.299,4.846,27.752,5.888,2.697.297,5.398.511,8.1.656-18.324,27.087-46.928,46.927-80.842,53.471-3.532.681-6.084,3.773-6.084,7.37v39.504c0,4.146,3.36,7.506,7.506,7.506h20.567c9.961,0,18.065,8.091,18.065,18.035,0,9.961-8.104,18.065-18.065,18.065h-20.567c-4.146,0-7.506,3.36-7.506,7.506v37.702c0,4.837-1.871,9.371-5.262,12.763-3.414,3.406-7.95,5.283-12.773,5.283-9.962,0-18.065-8.095-18.065-18.045v-37.703c0-4.146-3.36-7.506-7.506-7.506h-20.567c-9.951,0-18.045-8.104-18.045-18.065,0-9.944,8.095-18.035,18.045-18.035h20.567c4.146,0,7.506-3.36,7.506-7.506v-39.504c0-3.597-2.552-6.689-6.084-7.37-18.301-3.531-35.248-10.904-50.374-21.912-3.35-2.439-8.046-1.702-10.485,1.652-2.44,3.351-1.701,8.046,1.652,10.485,15.232,11.086,32.121,18.877,50.28,23.205v25.938h-13.061c-18.228,0-33.058,14.825-33.058,33.047,0,18.239,14.83,33.078,33.058,33.078h13.061v30.195c0,18.228,14.839,33.058,33.078,33.058,8.827,0,17.13-3.434,23.384-9.674,6.232-6.233,9.664-14.538,9.664-23.384v-30.195h13.061c18.239,0,33.078-14.839,33.078-33.078,0-18.222-14.839-33.047-33.078-33.047h-13.063v-25.94c38.689-9.24,70.649-34.11,89.68-67.038,23.34-1.609,46.152-8.808,66.098-21.086l45.857,45.858c-11.203,5.476-18.938,17.003-18.938,30.34,0,18.561,15.102,33.663,33.664,33.663h73.501c12.922,0,23.435-10.513,23.435-23.435v-73.502c0-18.561-15.101-33.663-33.663-33.663h0ZM141.768,298.3412c-43.851,0-79.527-35.676-79.527-79.528,0-32.4,19.481-60.307,47.33-72.694.301,38.311,15.34,74.264,42.476,101.402,12.571,12.57,27.343,22.659,43.415,29.846-14.159,13-33.002,20.974-53.694,20.974ZM473.102,354.9842c0,4.644-3.779,8.422-8.422,8.422h-73.501c-10.284,0-18.651-8.366-18.651-18.724,0-10.284,8.367-18.65,18.651-18.65,3.036,0,5.773-1.829,6.935-4.634s.52-6.033-1.626-8.181l-55.471-55.471c-2.831-2.831-6.565-4.295-10.347-4.295-2.669,0-5.364.729-7.782,2.223-24.487,15.123-53.823,21.712-82.611,18.531-29.64-3.269-56.478-16.167-77.611-37.301-24.69-24.689-38.218-57.515-38.095-92.432.124-34.913,13.891-67.646,38.764-92.169,49.205-48.512,130.719-49.308,180.808-1.732,21.866,20.77,35.922,48.625,39.575,78.432,3.594,29.313-2.921,59.211-18.346,84.187-3.608,5.845-2.756,13.3,2.072,18.129l55.47,55.47c2.147,2.146,5.374,2.788,8.181,1.626,2.805-1.161,4.634-3.899,4.634-6.935,0-10.284,8.366-18.65,18.65-18.65h.073c10.284,0,18.65,8.366,18.65,18.65v73.504Z"/><path d="M343.921,122.2012c-4.088.689-6.844,4.561-6.155,8.649,4.532,26.895-4.259,54.448-23.517,73.705-9.013,9.014-19.581,15.54-30.845,19.611.068-1.778.114-3.56.114-5.352,0-59.901-37.337-111.238-89.953-131.97.484-.508.951-1.026,1.449-1.524,32.873-32.873,86.362-32.873,119.235,0,4.909,4.909,9.192,10.386,12.729,16.279,2.134,3.555,6.744,4.705,10.3,2.572,3.554-2.134,4.706-6.745,2.572-10.3-4.168-6.943-9.21-13.392-14.985-19.168-38.728-38.726-101.74-38.726-140.468,0-38.726,38.727-38.726,101.74,0,140.468,19.364,19.363,44.798,29.045,70.234,29.045s50.87-9.682,70.234-29.045c22.685-22.686,33.041-55.14,27.704-86.815-.688-4.088-4.552-6.843-8.648-6.155h0ZM170.367,144.6202c29.757,11.514,50.929,40.415,50.929,74.193,0,1.175-.034,2.342-.087,3.504-9.516-4.097-18.434-10.002-26.194-17.763-16.518-16.517-24.729-38.238-24.648-59.934ZM235.938,227.1062c.239-2.734.37-5.498.37-8.293,0-41.627-27.039-77.044-64.467-89.64,1.983-10.5,5.974-20.687,11.957-29.954,49.287,17.38,84.707,64.424,84.707,119.593,0,3.122-.125,6.219-.351,9.293-10.685,1.724-21.634,1.39-32.216-.999h0Z"/></svg>`
        },
        activityTypes: {
            token: 'activity-types',
            name: 'Activity Types',
            icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 415.9976 409.0015"><path d="M21.4841,152.0738C9.6343,152.0738,0,161.7081,0,173.554s9.6343,21.4841,21.4841,21.4841c4.6455,0,8.9244-1.5212,12.4427-4.037,3.335,26.6835,14.1433,51.4753,30.7089,71.7346-11.4949.4057-20.7352,9.8176-20.7352,21.4061,0,11.8498,9.6343,21.4841,21.4841,21.4841,11.7406,0,21.2852-9.4783,21.449-21.1877,6.0731,4.7625,12.5402,9.0765,19.4168,12.821l-12.2399,29.5816c-1.0765,2.6095.1599,5.6012,2.7655,6.6816.6436.2613,1.3028.3862,1.9581.3862,2.0088,0,3.9083-1.1858,4.7235-3.1555l11.9785-28.9458c3.7991,1.7201,7.6723,3.3272,11.6665,4.7235.5578.195,1.1273.2847,1.6889.2847,2.1102,0,4.0878-1.3184,4.825-3.4247.9322-2.668-.472-5.5817-3.1399-6.5178-17.5641-6.1355-33.135-15.8556-46.151-28.076l72.3431-72.347c3.3467,2.4417,7.2277,4.1775,11.448,4.9771v15.216c0,2.824,2.2896,5.1097,5.1136,5.1097s5.1136-2.2857,5.1136-5.1097v-15.1496c4.3296-.7528,8.3198-2.4768,11.7523-4.9498l6.3111,6.3072c.9985.9985,2.3052,1.4978,3.6119,1.4978,1.3106,0,2.6173-.4993,3.6158-1.4978,1.9971-1.9971,1.9971-5.2306,0-7.2277l-6.4242-6.4242c2.1258-3.1789,3.6119-6.8103,4.3179-10.7108h102.424c-.4447,11.959-2.4066,23.7347-6.0458,35.054-.862,2.6875.6163,5.5661,3.3037,6.432,2.6836.8581,5.57-.6124,6.432-3.3076,2.6914-8.3705,4.4817-16.9829,5.5583-25.7162,3.53,2.547,7.8284,4.0878,12.5051,4.0878,11.842,0,21.4802-9.6343,21.4802-21.4841s-9.6382-21.4802-21.4802-21.4802c-4.6533,0-8.9361,1.5212-12.4544,4.0448-3.0892-24.8893-12.6611-47.7932-27.0229-66.9253,10.3325-1.5524,18.3052-10.4027,18.3052-21.1565,0-11.8498-9.6382-21.4841-21.4802-21.4841-10.4885,0-19.2101,7.5592-21.0824,17.5134-19.959-16.1482-44.3958-26.9409-71.1378-30.2291,2.4768-3.5027,3.9668-7.7503,3.9668-12.353,0-11.8498-9.6382-21.4841-21.4841-21.4841s-21.4841,9.6343-21.4841,21.4841c0,4.6299,1.5056,8.8932,4.0097,12.4076-24.9049,3.1399-47.8088,12.7781-66.9292,27.2062-1.3808-10.5236-10.3091-18.6991-21.1994-18.6991-11.8459,0-21.4802,9.6343-21.4802,21.4841,0,10.6328,7.7777,19.4207,17.9346,21.1253-16.1638,19.9278-26.976,44.3373-30.3071,71.052-3.5027-2.4924-7.7621-3.9863-12.3764-3.9863ZM21.4841,184.8148c-6.2057,0-11.2608-5.0551-11.2608-11.2608s5.0551-11.2569,11.2608-11.2569,11.253,5.0512,11.253,11.2569-5.0473,11.2608-11.253,11.2608ZM173.4448,191.7187c-10.1141,0-18.3481-8.2262-18.3481-18.3442s8.234-18.3481,18.3481-18.3481,18.3442,8.234,18.3442,18.3481-8.2301,18.3442-18.3442,18.3442ZM145.3571,178.4881c.6982,3.8498,2.157,7.4305,4.236,10.5782l-72.4445,72.4445c-20.3803-22.3773-32.8034-51.5962-33.9931-83.0227h102.2016ZM197.2107,157.5462l72.3743-72.3743c20.3178,22.0614,33.1428,51.1125,34.4222,83.0929h-102.4786c-.7099-3.9044-2.196-7.5397-4.3179-10.7187ZM190.0922,150.2015c-3.374-2.43-7.2862-4.1424-11.5339-4.9147V43.0891c32.3003,1.2248,61.6244,14.2252,83.8067,34.8434l-72.2729,72.269ZM168.3312,145.2869c-4.3023.7801-8.2613,2.5275-11.6626,5.0083l-72.152-72.152c22.1589-20.6884,51.4909-33.7708,83.8145-35.0501v102.1938ZM149.593,157.6827c-2.079,3.1477-3.5378,6.7323-4.236,10.5821H43.0969c1.2755-31.8712,14.0107-60.8365,34.2115-82.8706l72.2846,72.2885ZM65.3845,295.4026c-6.2057,0-11.2608-5.0551-11.2608-11.2608s5.0551-11.2569,11.2608-11.2569,11.253,5.0512,11.253,11.2569-5.0473,11.2608-11.253,11.2608ZM325.7058,162.2971c6.2057,0,11.253,5.0512,11.253,11.2569s-5.0473,11.2608-11.253,11.2608-11.2569-5.0551-11.2569-11.2608,5.0512-11.2569,11.2569-11.2569ZM283.0535,56.7761c6.2057,0,11.253,5.0551,11.253,11.2608s-5.0473,11.253-11.253,11.253-11.2569-5.0473-11.2569-11.253,5.0512-11.2608,11.2569-11.2608ZM173.316,10.2233c6.2057,0,11.2569,5.0551,11.2569,11.2608s-5.0512,11.253-11.2569,11.253-11.2608-5.0473-11.2608-11.253,5.0551-11.2608,11.2608-11.2608ZM56.4562,63.8828c0-6.2057,5.0512-11.2608,11.2569-11.2608s11.2569,5.0551,11.2569,11.2608-5.0512,11.2569-11.2569,11.2569-11.2569-5.0512-11.2569-11.2569Z"/><path d="M5.1136,375.5428h18.7849c2.0985.0429,4.1502.0624,6.1823.0624.7567,0,1.4627-.0312,2.2116-.0351v28.3178c0,2.824,2.2857,5.1136,5.1136,5.1136,2.824,0,5.1097-2.2896,5.1097-5.1136v-28.5753c11.6353-.4954,22.1199-1.6577,31.4968-3.452v32.0272c0,2.824,2.2857,5.1136,5.1097,5.1136,2.8279,0,5.1136-2.2896,5.1136-5.1136v-34.3597c12.3608-3.2101,22.6621-7.567,31.2783-12.7898v47.1496c0,2.824,2.2857,5.1136,5.1136,5.1136,2.824,0,5.1136-2.2896,5.1136-5.1136v-54.2953c16.351-13.2696,25.1896-30.194,31.2744-47.3368v101.6322c0,2.824,2.2857,5.1136,5.1097,5.1136,2.8279,0,5.1136-2.2896,5.1136-5.1136v-135.5004c7.1224-20.5675,20.3217-33.5172,30.8493-40.9867v176.4872c0,2.824,2.2857,5.1136,5.1136,5.1136,2.824,0,5.1136-2.2896,5.1136-5.1136v-182.7241c3.0736-1.5719,5.098-2.3481,5.2501-2.4027.1677-.0702,11.998-5.0005,27.4285-4.2048v189.3316c0,2.824,2.2896,5.1136,5.1136,5.1136,2.8279,0,5.1136-2.2896,5.1136-5.1136v-187.9235c3.6275.8113,7.3369,1.9581,11.0619,3.6431,7.4656,3.3779,14.194,8.4134,20.2164,14.9585v169.3219c0,2.824,2.2857,5.1136,5.1136,5.1136,2.824,0,5.1097-2.2896,5.1097-5.1136v-155.6155c4.7976,7.9103,8.9517,17.1545,12.4154,27.7562,4.9537,15.1731,11.4402,26.8473,18.43,35.9005v91.9588c0,2.824,2.2896,5.1136,5.1136,5.1136s5.1136-2.2896,5.1136-5.1136v-80.7448c6.9936,6.4476,14.0224,10.7967,20.1891,13.6792,4.4232,2.0673,8.6475,3.5261,12.4973,4.5636v62.5021c0,2.824,2.2857,5.1136,5.1136,5.1136,2.824,0,5.1097-2.2896,5.1097-5.1136v-60.4933c5.3827.6553,8.7684.4291,8.862.4213l18.3208-.0039c2.824,0,5.1097-2.2935,5.1097-5.1136,0-2.8279-2.2896-5.1136-5.1097-5.1136l-18.6874.0195c-2.0088.0975-49.6303,2.668-70.3499-60.7507-10.3676-31.7464-26.6874-52.817-48.4953-62.623-28.5636-12.8561-55.7112-1.3457-56.5225-.9829-1.685.5929-41.3417,15.1145-54.1705,61.7337l-.9439,3.4364c-6.6114,24.195-13.6792,50.2076-36.743,68.1968-.4057.2535-.7957.5188-1.1156.8737-18.4729,13.8859-46.9233,22.744-92.8638,21.8313H5.1136c-2.8279,0-5.1136,2.2857-5.1136,5.1136,0,2.824,2.2857,5.1097,5.1136,5.1097Z"/></svg>`
        },
        verifications: {
            token: 'verifications',
            name: 'Verifications',
            icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 425.382 494"><path d="M410.213,67.013L213.021.627c-2.484-.836-5.174-.836-7.658,0L8.171,67.013c-4.883,1.644-8.171,6.221-8.171,11.373v164.825c0,122.08,87.022,227.462,206.92,250.572.75.145,1.511.217,2.271.217s1.521-.072,2.271-.217c119.897-23.11,206.92-128.492,206.92-250.572V78.386c.001-5.153-3.287-9.73-8.169-11.373h0ZM394.383,243.211c0,109.829-77.738,204.737-185.191,226.557-107.453-21.82-185.191-116.728-185.191-226.557V87.008L209.192,24.662l185.191,62.346v156.203ZM186.917,290.563l126.273-120.9c4.787-4.583,12.383-4.418,16.967.369,4.583,4.787,4.418,12.383-.369,16.967l-134.402,128.683c-2.317,2.219-5.308,3.332-8.3,3.332-2.908,0-5.818-1.052-8.116-3.161l-74.957-68.838c-4.881-4.483-5.204-12.074-.722-16.956,4.483-4.881,12.075-5.203,16.956-.722l66.67,61.226Z"/></svg>`
        },
        networks: {
            token: 'networks',
            name: 'Networks',
            icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 487 480"><path d="M384,192c52.9375,0,96-43.0625,96-96S436.9375,0,384,0c-38.4414,0-71.5859,22.7617-86.9023,55.4727l-25.707-9.4883c.3047-1.9688.6094-3.9375.6094-5.9844,0-22.0547-17.9453-40-40-40s-40,17.9453-40,40,17.9453,40,40,40c14.3281,0,26.8242-7.6406,33.8867-18.9922l25.6641,9.4727c-2.2539,8.1445-3.5508,16.6719-3.5508,25.5195,0,10.4805,1.7422,20.543,4.8633,29.9922l-87.9844,37.2891c-16.1094-30.457-48.0859-51.2812-84.8789-51.2812-11.9219,0-23.2969,2.2891-33.8398,6.2734l-22.1289-46.5039c9.6406-7.3125,15.9688-18.7695,15.9688-31.7695C80,17.9453,62.0547,0,40,0S0,17.9453,0,40s17.9453,40,40,40c3.3281,0,6.5195-.5273,9.6172-1.3047l22.1016,46.457c-28.4883,16.6719-47.7188,47.5195-47.7188,82.8477,0,33.1836,16.9297,62.4727,42.5938,79.7188l-14.6328,26.3047c-3.8086-1.1992-7.7695-2.0234-11.9609-2.0234-22.0547,0-40,17.9453-40,40s17.9453,40,40,40,40-17.9453,40-40c0-12.1133-5.5273-22.8555-14.0547-30.1914l14.6641-26.3594c12.0312,5.4453,25.3438,8.5508,39.3906,8.5508,21.9531,0,42.1445-7.4883,58.3359-19.9375l31.4883,34.6406c-15.9688,17.1523-25.8242,40.0664-25.8242,65.2969,0,4.8945.4883,9.6641,1.1914,14.3594l-37.0469,8.793c-6.375-13.6328-20.1289-23.1523-36.1445-23.1523-22.0547,0-40,17.9453-40,40s17.9453,40,40,40,40-17.9453,40-40c0-.4414-.1211-.8555-.1289-1.2969l36.9766-8.7656c12.6094,38.3086,48.6719,66.0625,91.1523,66.0625,52.9375,0,96-43.0625,96-96,0-16.4141-4.1523-31.8711-11.4492-45.3906l46.9922-30.5547c7.2656,7.3594,17.3281,11.9453,28.457,11.9453,22.0547,0,40-17.9453,40-40s-17.9453-40-40-40-40,17.9453-40,40c0,5.168,1.0625,10.0781,2.8555,14.6172l-47.1016,30.6211c-9.4258-12.1172-21.6641-21.9023-35.7539-28.3984l39.0469-108.2461c7.9688,2.1484,16.3125,3.4062,24.9531,3.4062ZM232,64c-13.2305,0-24-10.7695-24-24s10.7695-24,24-24,24,10.7695,24,24-10.7695,24-24,24ZM16,40c0-13.2305,10.7695-24,24-24s24,10.7695,24,24-10.7695,24-24,24-24-10.7695-24-24ZM40,376c-13.2305,0-24-10.7695-24-24s10.7695-24,24-24,24,10.7695,24,24-10.7695,24-24,24ZM112,448c-13.2305,0-24-10.7695-24-24s10.7695-24,24-24,24,10.7695,24,24-10.7695,24-24,24ZM440,256c13.2305,0,24,10.7695,24,24s-10.7695,24-24,24-24-10.7695-24-24,10.7695-24,24-24ZM336.8867,160.5117c3.5703-18.5039,19.8828-32.5117,39.1133-32.5117h16c19.2305,0,35.543,14.0078,39.1133,32.5117-13.2344,9.6875-29.4883,15.4883-47.1133,15.4883s-33.8789-5.8008-47.1133-15.4883ZM384,112c-13.2305,0-24-10.7695-24-24s10.7695-24,24-24,24,10.7695,24,24-10.7695,24-24,24ZM384,16c44.1133,0,80,35.8867,80,80,0,20-7.4336,38.2734-19.6172,52.3125-5.6055-14.7617-17.293-26.543-31.8555-32.3594,7.082-7.2188,11.4727-17.0742,11.4727-27.9531,0-22.0547-17.9453-40-40-40s-40,17.9453-40,40c0,10.8789,4.3906,20.7344,11.4727,27.9531-14.5625,5.8164-26.25,17.5977-31.8555,32.3594-12.1836-14.0391-19.6172-32.3125-19.6172-52.3125,0-44.1133,35.8867-80,80-80ZM40,208c0-44.1133,35.8867-80,80-80s80,35.8867,80,80c0,20.0625-7.4805,38.3828-19.7266,52.4414-5.5859-14.8164-17.2969-26.6562-31.8984-32.4883,7.0742-7.2188,11.4648-17.0742,11.4648-27.9531,0-22.0547-17.9453-40-40-40s-40,17.9453-40,40c0,10.8789,4.3906,20.7344,11.4727,27.9531-14.5195,5.7891-26.1914,17.5273-31.8164,32.2305-12.1133-14.0234-19.4961-32.2383-19.4961-52.1836ZM95.8398,200c0-13.2305,10.7695-24,24-24s24,10.7695,24,24-10.7695,24-24,24-24-10.7695-24-24ZM72.7539,272.4062c3.6055-18.4531,19.8945-32.4062,39.0859-32.4062h16c19.2656,0,35.6094,14.0547,39.1289,32.6172-13.207,9.6289-29.4102,15.3828-46.9688,15.3828-17.6875,0-33.9922-5.8398-47.2461-15.5938ZM232.7539,448.4062c3.6055-18.4531,19.8945-32.4062,39.0859-32.4062h16c19.2656,0,35.6094,14.0547,39.1289,32.6172-13.207,9.6289-29.4102,15.3828-46.9688,15.3828-17.6875,0-33.9922-5.8398-47.2461-15.5938ZM279.8398,400c-13.2305,0-24-10.7695-24-24s10.7695-24,24-24,24,10.7695,24,24-10.7695,24-24,24ZM360,384c0,20.0625-7.4805,38.3828-19.7266,52.4414-5.5859-14.8164-17.2969-26.6562-31.8984-32.4883,7.0742-7.2188,11.4648-17.0742,11.4648-27.9531,0-22.0547-17.9453-40-40-40s-40,17.9453-40,40c0,10.8789,4.3906,20.7344,11.4727,27.9531-14.5195,5.7891-26.1914,17.5273-31.8164,32.2305-12.1133-14.0234-19.4961-32.2383-19.4961-52.1836,0-44.1133,35.8867-80,80-80s80,35.8867,80,80ZM304.9531,291.4062c-7.9688-2.1484-16.3125-3.4062-24.9531-3.4062-21.9531,0-42.1445,7.4883-58.3359,19.9375l-31.4883-34.6406c15.9688-17.1523,25.8242-40.0664,25.8242-65.2969,0-10.4805-1.7422-20.543-4.8633-29.9922l87.9844-37.2891c9.8555,18.6328,25.6719,33.5859,44.8867,42.4414l-39.0547,108.2461Z"/></svg>`
        },
        distance: {
            token: 'distance',
            name: 'Distance',
            icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 30.3688 25.9848"><defs><style>.distance-icon-cls-1{fill-rule:evenodd;}</style></defs><path class="distance-icon-cls-1" d="M3.5723,17.9278c-.8842-.2233-1.5396-1.0246-1.5396-1.9781,0-1.1254.9139-2.0395,2.0392-2.0395s2.0388.9141,2.0388,2.0395c0,.9534-.6551,1.7548-1.5393,1.9781v3.5597c0,.9278.3683,1.8174,1.024,2.4733.6557.6562,1.5454,1.0246,2.4726,1.0246h1.9983c1.9314,0,3.497-1.5661,3.497-3.4979V4.4972c0-2.4838,2.0129-4.4972,4.4957-4.4972h1.9983c1.1925,0,2.3359.4738,3.1791,1.3172.8433.8437,1.3169,1.9874,1.3169,3.1801v3.0194c.8842.2229,1.5393,1.0246,1.5393,1.9777,0,1.1258-.9135,2.0399-2.0388,2.0399s-2.0392-.9142-2.0392-2.0399c0-.9531.6554-1.7548,1.5396-1.9777v-3.0194c0-.9274-.3686-1.8174-1.0244-2.4733s-1.5451-1.0246-2.4726-1.0246h-1.9983c-1.9311,0-3.4966,1.5661-3.4966,3.4983v16.99c0,2.4838-2.0129,4.4972-4.4961,4.4972h-1.9983c-1.1921,0-2.3359-.4738-3.1788-1.3172-.8433-.8434-1.3169-1.9874-1.3169-3.1801v-3.5597ZM4.0719,16.99c.5739,0,1.0397-.466,1.0397-1.0402,0-.5738-.4658-1.0402-1.0397-1.0402s-1.04.4664-1.04,1.0402c0,.5742.4661,1.0402,1.04,1.0402ZM23.8891,8.4674c-.4958.079-.8753.5092-.8753,1.027,0,.5742.4661,1.0402,1.04,1.0402s1.0397-.466,1.0397-1.0402c0-.5178-.3795-.948-.8753-1.027-.0515.0179-.1067.0276-.1644.0276s-.1132-.0097-.1647-.0276h0ZM4.0801,1.4899c2.2506,0,4.0637,1.5595,4.0637,4.1269,0,.7352-.3332,1.7069-.8211,2.7-1.068,2.1726-2.847,4.4813-2.847,4.4813-.0945.1225-.2404.1941-.3949.1945-.1548,0-.3008-.0716-.3956-.1937,0,0-1.7872-2.3083-2.86-4.4813-.4907-.9935-.8252-1.9652-.8252-2.7008C0,3.0501,1.8301,1.4899,4.0801,1.4899ZM4.0801,2.4896c-1.7023,0-3.0809,1.1857-3.0809,3.1272,0,.6173.31,1.4241.7216,2.2581.7246,1.4673,1.7882,2.9984,2.3584,3.7811.5678-.7831,1.6259-2.3134,2.3468-3.7803.4102-.834.7188-1.6412.7188-2.2589,0-1.9407-1.363-3.1272-3.0646-3.1272h0ZM23.9723,12.5017c2.4354,0,4.3965,1.6879,4.3965,4.4661,0,.7982-.3628,1.8528-.8931,2.9311-1.1655,2.3721-3.1079,4.8921-3.1079,4.8921-.0945.1225-.2404.1941-.3949.1945-.1548,0-.3008-.0712-.3956-.1937,0,0-1.9512-2.5199-3.1222-4.8921-.5326-1.0787-.8975-2.1337-.8975-2.9319,0-2.7775,1.9798-4.4661,4.4146-4.4661h0ZM23.9723,13.5014c-1.8867,0-3.4155,1.314-3.4155,3.4664,0,.6804.34,1.57.7942,2.4896.8095,1.6396,2.0061,3.3524,2.6202,4.193.6118-.841,1.8022-2.553,2.608-4.1923.4518-.9196.7904-1.81.7904-2.4904,0-2.1519-1.5113-3.4664-3.3974-3.4664Z"/></svg>`
        },
        interests: {
            token: 'interests',
            name: 'Interests',
            icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 505.736 499.736"><g id="_x32_1_Add_Love"><path d="M249.868,0C112.089,0,0,112.093,0,249.868s112.089,249.868,249.868,249.868c40.25,0,80.329-9.837,115.906-28.458,3.82-1.998,5.296-6.718,3.298-10.538s-6.707-5.315-10.542-3.294c-33.35,17.447-70.924,26.674-108.661,26.674-129.167-.001-234.252-105.086-234.252-234.252S120.702,15.617,249.868,15.617s234.251,105.085,234.251,234.251c0,37.929-8.796,74.157-26.144,107.678-1.983,3.836-.484,8.548,3.348,10.523,3.824,1.99,8.544.48,10.523-3.34,18.507-35.763,27.89-74.408,27.89-114.861C499.736,112.093,387.647,0,249.868,0h0Z"/><path d="M381.543,149.755c-30.013-30.013-78.842-30.006-108.856,0l-22.819,22.822-22.819-22.823c-30.013-30.013-78.842-30.006-108.856,0-30.084,30.084-30.092,78.795.011,108.875l126.143,126.078c1.525,1.525,3.523,2.288,5.521,2.288s3.996-.763,5.521-2.288l126.143-126.078c30.096-30.072,30.103-78.783.011-108.874h0ZM249.868,368.145l-120.622-120.557c-23.989-23.981-24-62.803-.011-86.792,23.921-23.921,62.84-23.925,86.773,0l28.34,28.343c2.928,2.928,8.113,2.928,11.042,0l28.34-28.343c23.917-23.928,62.848-23.928,86.773,0,23.985,23.985,23.982,62.807-.011,86.792l-120.624,120.557Z"/><path d="M370.52,428.759h43.636v43.632c0,4.316,3.496,7.808,7.808,7.808s7.808-3.492,7.808-7.808v-43.632h43.636c4.312,0,7.808-3.492,7.808-7.808s-3.496-7.808-7.808-7.808h-43.636v-43.64c0-4.316-3.496-7.808-7.808-7.808s-7.808,3.492-7.808,7.808v43.64h-43.636c-4.312,0-7.808,3.492-7.808,7.808s3.496,7.808,7.808,7.808h0Z"/></g></svg>`
        },
    },
    availability: {
        data: {},
        days: [
            { index: 0, name: 'Sunday' },
            { index: 1, name: 'Monday' },
            { index: 2, name: 'Tuesday' },
            { index: 3, name: 'Wednesday' },
            { index: 4, name: 'Thursday' },
            { index: 5, name: 'Friday' },
            { index: 6, name: 'Saturday' }
        ],
        times: {
            default: {
                start: '09:00',
                end: '21:00'
            }
        },
        selectedDay: null,
        init: function() {
            const section = befriend.filters.sections.availability;
            const filter_data = befriend.filters.data.filters?.['availability'];

            if (filter_data?.items) {
                const availability = {};

                for (let [id, record] of Object.entries(filter_data.items)) {
                    const dayIndex = record.day_of_week;

                    if (!availability[dayIndex]) {
                        availability[dayIndex] = {
                            isDisabled: !record.is_active,
                            isAny: false,
                            times: {}
                        };
                    }

                    // Handle day-level record
                    if (record.is_day) {
                        availability[dayIndex].isDisabled = !record.is_active;
                        availability[dayIndex].isAny = record.is_any_time;
                    }
                    // Handle time-level records
                    else if (record.is_time) {
                        availability[dayIndex].times[id] = {
                            id: id,
                            start: record.start_time?.slice(0, 5), // Convert HH:mm:ss to HH:mm
                            end: record.end_time?.slice(0, 5)
                        };
                    }
                }

                this.data = availability;
            }

            const section_el = befriend.els.filters.querySelector(`.section.${section.token}`);
            const filter_options = section_el.querySelector('.filter-options');

            let daysHtml = this.days.map(day => `
            <div class="day-section" data-day-index="${day.index}">
                <div class="day-tab">
                    <div class="day-info">
                        <div class="day-name">
                            <div class="name">
                                ${day.name}
                            </div>
                        </div>
                        <div class="selected-container">
                            
                            <div class="selected-times"></div>
                        </div>
                    </div>
                    <div class="day-actions">
                        ${toggleHtml(true, null, 'toggle-24')}
                    </div>
                    <div class="chevron">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 360.0005 192.001"><path id="Down_Arrow" d="M176.001,192.001c-4.092,0-8.188-1.564-11.312-4.688L4.689,27.313C-1.563,21.061-1.563,10.937,4.689,4.689s16.376-6.252,22.624,0l148.688,148.688L324.689,4.689c6.252-6.252,16.376-6.252,22.624,0s6.252,16.376,0,22.624l-160,160c-3.124,3.124-7.22,4.688-11.312,4.688h0Z"/></svg>
                    </div>
                </div>
                <div class="time-slots-container">
                    <div class="wrapper">
                        <div class="time-slots"></div>
                        <div class="time-actions">
                            <button class="add-time-btn">
                                <div class="icon-name">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><g id="Ebene_1"><path d="M46.5,4h-4.5V1c0-.552-.447-1-1-1s-1,.448-1,1v3H10V1c0-.552-.448-1-1-1s-1,.448-1,1v3H3.5c-1.93,0-3.5,1.57-3.5,3.5v39c0,1.93,1.57,3.5,3.5,3.5h43c1.93,0,3.5-1.57,3.5-3.5V7.5c0-1.93-1.57-3.5-3.5-3.5ZM3.5,6h4.5v3c0,.552.448,1,1,1s1-.448,1-1v-3h30v3c0,.552.447,1,1,1s1-.448,1-1v-3h4.5c.827,0,1.5.673,1.5,1.5v6.5H2v-6.5c0-.827.673-1.5,1.5-1.5ZM46.5,48H3.5c-.827,0-1.5-.673-1.5-1.5v-30.5h46v30.5c0,.827-.673,1.5-1.5,1.5Z"/><path d="M33,30h-7v-7c0-.552-.448-1-1-1s-1,.448-1,1v7h-7c-.552,0-1,.447-1,1s.448,1,1,1h7v7c0,.553.448,1,1,1s1-.447,1-1v-7h7c.553,0,1-.447,1-1s-.447-1-1-1Z"/></g></svg>
                                    Add Time
                                </div>      
                            </button>
                            <button class="any-time-btn">
                                <div class="icon-name">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 450.536 463.816"><g id="Layer_25"><path d="M348.504,31.304v-10.288c0-11.592-9.432-21.016-21.016-21.016s-21.016,9.432-21.016,21.016v8.832h-64.688v-8.832c0-11.592-9.432-21.016-21.016-21.016s-21.016,9.432-21.016,21.016v8.832h-64.688v-8.832c0-11.592-9.432-21.016-21.016-21.016s-21.016,9.432-21.016,21.016v10.296C39.528,39.752,0,84.712,0,138.824v216.016c0,60.088,49.688,108.976,110.768,108.976h220c61.08,0,110.768-48.888,110.768-108.976v-216.016c0-54.112-39.528-99.072-93.032-107.52h0ZM322.472,21.016c0-2.768,2.248-5.016,5.016-5.016s5.016,2.248,5.016,5.016v33.04c0,2.768-2.248,5.016-5.016,5.016s-5.016-2.248-5.016-5.016V21.016ZM215.752,21.016c0-2.768,2.248-5.016,5.016-5.016s5.016,2.248,5.016,5.016v33.04c0,2.768-2.248,5.016-5.016,5.016s-5.016-2.248-5.016-5.016V21.016ZM109.032,21.016c0-2.768,2.248-5.016,5.016-5.016s5.016,2.248,5.016,5.016v33.04c0,2.768-2.248,5.016-5.016,5.016s-5.016-2.248-5.016-5.016V21.016ZM93.032,47.44v6.608c0,11.592,9.432,21.016,21.016,21.016s21.016-9.432,21.016-21.016v-8.2h64.688v8.208c0,11.592,9.432,21.016,21.016,21.016s21.016-9.432,21.016-21.016v-8.208h64.688v8.208c0,11.592,9.432,21.016,21.016,21.016s21.016-9.432,21.016-21.016v-6.616c43.832,8.08,76,44.976,76.936,89.4H16.096c.936-44.424,33.112-81.312,76.936-89.4ZM425.536,354.84c0,51.264-42.504,92.976-94.768,92.976H110.768c-52.256,0-94.768-41.712-94.768-92.976v-201.992h409.528v201.992h.008Z"/></g><path d="M111.3384,371.1272c-19.4207,0-32.2954-13.0932-32.2954-30.9862,0-15.9286,10.4741-29.2402,27.7126-32.2954l58.4811-12.2195c14.8385-2.8368,23.566-13.0918,23.566-26.8389,0-19.422-13.3102-32.9507-33.1677-32.9507h-67.8631v-17.4562h67.8631c30.1139,0,50.8437,20.7285,50.8437,50.8424,0,22.039-15.2747,38.6229-37.3144,42.7689l-57.608,11.3471c-8.9465,1.3092-14.8378,7.638-14.8378,16.3655,0,8.5104,6.1097,14.1839,15.7109,13.9655h93.3941v17.4575h-94.4849Z"/><path d="M345.0368,240.2009h17.4562v130.9263h-17.4562v-42.3334h-67.4276c-17.4562,0-29.2402-12.2195-29.2402-27.7126,0-3.2736.4368-6.7643,1.746-10.4735l25.9666-77.6833,16.8023,5.4558-26.6218,78.7734c-.4368,1.3092-.6539,2.8368-.6539,4.3644,0,6.1091,3.9275,9.8195,10.9103,9.8195h68.5183v-71.1367Z"/></svg>
                                    Any Time
                                </div>
                            </button>
                            <button class="copy-all-btn">
                                <div class="icon-name">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 420 419.0138"><path d="M366.0771,35.7422h-15.4895v-13.1703c0-12.4661-8.4905-22.5719-18.9641-22.5719s-18.9641,10.1058-18.9641,22.5719v13.1703H97.3406v-13.1703C97.3391,10.1058,88.8474.0014,78.3738.0031c-10.4715.0017-18.96,10.1051-18.9615,22.5688v13.1703h-15.4895C19.6763,35.7748.0274,59.1618,0,88.0211v278.7138c.0274,28.8593,19.6763,52.2463,43.9229,52.2789h322.1543c24.2466-.0325,43.8955-23.4196,43.9229-52.2789V88.0211c-.0274-28.8593-19.6763-52.2463-43.9229-52.2789ZM323.8704,22.5719c0-5.0966,3.4712-9.2282,7.7532-9.2282s7.7532,4.1316,7.7532,9.2282v39.6862c0,5.0966-3.4712,9.2282-7.7532,9.2282s-7.7532-4.1316-7.7532-9.2282h0V22.5719ZM70.6233,22.5719c.0019-5.0966,3.4746-9.2263,7.7566-9.2241,4.2793.0023,7.7478,4.1307,7.7497,9.2241v39.6862c-.0019,5.0966-3.4746,9.2263-7.7566,9.2241-4.2793-.0023-7.7478-4.1307-7.7497-9.2241V22.5719ZM366.0771,405.67H43.9229c-18.0571-.0263-32.6899-17.4428-32.7119-38.9352v-222.6319h387.5781v222.6319c-.0221,21.4924-14.6548,38.9089-32.7119,38.9352ZM398.7891,130.7592H11.2109v-42.7381c.0221-21.4924,14.6548-38.9089,32.7119-38.9352h15.4895v13.1722c.0014,12.4661,8.4931,22.5705,18.9667,22.5688,10.4715-.0017,18.96-10.1051,18.9615-22.5688v-13.1722h215.3189v13.1722c0,12.4661,8.4905,22.5719,18.9641,22.5719s18.9641-10.1058,18.9641-22.5719v-13.1722h15.4895c18.0571.0263,32.6899,17.4428,32.7119,38.9352v42.7381Z"/><path d="M233.802,209.6609h-93.2674c-8.7515,0-15.8596,7.108-15.8596,15.8596v133.8203c0,8.7515,7.108,15.8596,15.8596,15.8596h93.2674c8.7515,0,15.8596-7.108,15.8596-15.8596v-133.8203c-.0411-8.7515-7.1491-15.8596-15.8596-15.8596ZM238.527,359.2997c0,2.6296-2.1365,4.7661-4.7661,4.7661h-93.2674c-2.6296,0-4.7661-2.1365-4.7661-4.7661v-133.7792c0-2.6296,2.1365-4.7661,4.7661-4.7661h93.2674c2.6296,0,4.7661,2.1365,4.7661,4.7661v133.7792Z"/><path d="M269.4655,174.5726h-93.2674c-8.7515,0-15.8596,7.108-15.8596,15.8596,0,3.0815,2.4652,5.5467,5.5467,5.5467s5.5467-2.4652,5.5467-5.5467c0-2.6296,2.1365-4.7661,4.7661-4.7661h93.2674c2.6296,0,4.7661,2.1365,4.7661,4.7661v133.8203c0,2.6296-2.1365,4.7661-4.7661,4.7661-3.0815,0-5.5467,2.4652-5.5467,5.5467s2.4652,5.5467,5.5467,5.5467c8.7515,0,15.8596-7.108,15.8596-15.8596v-133.8203c0-8.7515-7.108-15.8596-15.8596-15.8596Z"/></svg>
                                    Copy
                                </div>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `).join('');

            filter_options.innerHTML = `
            <div class="filter-option" data-filter-token="${section.token}">
                <div class="days-container">
                    ${daysHtml}
                </div>
            </div>
        `;

            this.initEvents(section_el);
            this.setData();
        },
        initEvents: function(section_el) {
            // Day tab click handler
            const dayTabs = section_el.querySelectorAll('.day-tab');
            for (const tab of dayTabs) {
                if (tab._listener) continue;
                tab._listener = true;

                tab.addEventListener('click', (e) => {
                    // Don't handle click if clicking toggle or if day is disabled
                    if (e.target.closest('.toggle')) return;

                    const daySection = tab.closest('.day-section');
                    const dayIndex = daySection.getAttribute('data-day-index');

                    if (this.selectedDay === dayIndex) {
                        this.closeTimeSlots(daySection);
                        this.selectedDay = null;
                    } else {
                        if (this.selectedDay !== null) {
                            const prevSection = section_el.querySelector(`.day-section[data-day-index="${this.selectedDay}"]`);
                            this.closeTimeSlots(prevSection);
                        }
                        this.openTimeSlots(daySection, 0, true);
                        this.selectedDay = dayIndex;
                    }
                });
            }

            // Initialize toggle handlers
            const toggles = section_el.querySelectorAll('.day-tab .toggle');
            for (const toggle of toggles) {
                if (toggle._listener) continue;
                toggle._listener = true;

                toggle.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();

                    const daySection = toggle.closest('.day-section');
                    const dayIndex = daySection.getAttribute('data-day-index');
                    const isActive = toggle.classList.contains('active');

                    this.toggleDayAvailability(dayIndex, !isActive);
                });
            }

            this.initTimeButtons(section_el);
        },
        initTimeButtons: function(section_el) {
            // Add time button handler
            const addTimeBtns = section_el.querySelectorAll('.add-time-btn');
            for (const btn of addTimeBtns) {
                if (btn._listener) continue;
                btn._listener = true;

                btn.addEventListener('click', () => {
                    const daySection = btn.closest('.day-section');
                    const dayIndex = daySection.getAttribute('data-day-index');
                    this.showTimePickerPopup(dayIndex);
                });
            }

            // Any time button handler
            const anyTimeBtns = section_el.querySelectorAll('.any-time-btn');
            for (const btn of anyTimeBtns) {
                if (btn._listener) continue;
                btn._listener = true;

                btn.addEventListener('click', () => {
                    const daySection = btn.closest('.day-section');
                    const dayIndex = daySection.getAttribute('data-day-index');
                    this.setAnyTime(dayIndex);
                });
            }

            // Copy to all days button handler
            const copyBtns = section_el.querySelectorAll('.copy-all-btn');
            for (const btn of copyBtns) {
                if (btn._listener) continue;
                btn._listener = true;

                btn.addEventListener('click', () => {
                    const daySection = btn.closest('.day-section');
                    const dayIndex = daySection.getAttribute('data-day-index');
                    this.copyToAllDays(dayIndex);
                });
            }
        },
        getDaySection: function(dayIndex) {
            return befriend.els.filters.querySelector(`.day-section[data-day-index="${dayIndex}"]`);
        },
        toggleDayAvailability: function(dayIndex, isAvailable) {
            const daySection = this.getDaySection(dayIndex);
            if (!daySection) return;

            const toggle = daySection.querySelector('.toggle');
            const selectedTimesEl = daySection.querySelector('.selected-times');

            if (isAvailable) {
                addClassEl('active', toggle);

                // Check if we have this day in stored filter data
                const filter_data = befriend.filters.data.filters?.['availability'];
                if (filter_data?.items) {
                    const dayRecord = Object.values(filter_data.items).find(
                        record => record.day_of_week === parseInt(dayIndex) && record.is_day
                    );

                    // If we have a day record and it was set to any time, restore that state
                    if (dayRecord?.is_any_time) {
                        this.data[dayIndex] = {
                            isAny: true,
                            times: {},
                            isDisabled: false
                        };
                    } else if (!this.data[dayIndex] || this.data[dayIndex].isDisabled) {
                        // Fallback to previous behavior for non-any-time days
                        if (this.data[dayIndex]?.lastTimes) {
                            this.data[dayIndex] = {
                                times: {
                                    [this.generateTimeId()]: this.data[dayIndex].lastTimes
                                },
                                isDisabled: false,
                                isAny: false
                            };
                        } else {
                            this.data[dayIndex] = {
                                times: {},
                                isDisabled: false,
                                isAny: false
                            };
                        }
                    }
                }
            } else {
                removeClassEl('active', toggle);

                // Store current times before disabling
                const currentTimes = this.data[dayIndex]?.times || {};
                const timeValues = Object.values(currentTimes);

                // Preserve isAny state when disabling
                this.data[dayIndex] = {
                    isDisabled: true,
                    isAny: this.data[dayIndex]?.isAny || false,
                    times: {},  // Keep empty times object for consistency
                    lastTimes: timeValues.length > 0 ? timeValues[0] : null
                };

                selectedTimesEl.innerHTML = '<span class="not-available">Not Available</span>';
            }

            // Update the UI without affecting the time slots container state
            this.updateDayTimesDisplay(dayIndex);
            this.saveData();
        },
        setAnyTime: function(dayIndex) {
            const daySection = this.getDaySection(dayIndex);
            if (!daySection) return;

            // Clear existing times and set isAny
            this.data[dayIndex] = {
                isAny: true,
                times: {},
                isDisabled: false  // Ensure day is enabled when setting any time
            };

            // Update UI state
            const toggle = daySection.querySelector('.toggle');
            addClassEl('active', toggle);

            // Remove has-slots class since we're clearing times
            const timeSlotsContainer = daySection.querySelector('.time-slots-container');
            removeClassEl('has-slots', timeSlotsContainer);

            // Keep time slots container open if it was open
            if (this.selectedDay === dayIndex) {
                const timeSlots = daySection.querySelector('.time-slots');
                let timeSlotEls = timeSlots.getElementsByClassName('time-slot');
                let timeSlotCount = timeSlotEls?.length || 0;
                let timeSlotHeight = timeSlotEls?.[0]?.offsetHeight || 0;

                timeSlots.innerHTML = ''; // Clear existing time slots

                requestAnimationFrame(() => {
                    this.openTimeSlots(daySection, timeSlotCount * (timeSlotHeight + befriend.variables.filters_time_slot_gap));
                });
            }

            this.updateDayTimesDisplay(dayIndex);
            this.updateDayUI(dayIndex);
            this.saveData();
        },
        async copyToAllDays(sourceDayIndex) {
            const sourceData = this.data[sourceDayIndex];
            if (!sourceData) return;

            // Calculate the height of time slots for UI updates
            const sourceSection = this.getDaySection(sourceDayIndex);
            const timeSlots = sourceSection.querySelectorAll('.time-slot');
            const totalGap = (timeSlots.length - 1) * befriend.variables.filters_time_slot_gap;
            const totalHeight = Array.from(timeSlots).reduce((sum, slot) => sum + slot.offsetHeight, 0) + totalGap;

            for (const day of this.days) {
                if (day.index.toString() !== sourceDayIndex) {
                    // Deep copy the source data and explicitly set isAny to false
                    const copiedData = {
                        ...sourceData,
                        times: {},
                        isAny: sourceData.isAny
                    };

                    // Generate new IDs for each time slot
                    if (sourceData.times) {
                        for(let k in sourceData.times) {
                            let timeSlot = sourceData.times[k];
                            const newTimeId = 'time_' + Math.random().toString(36).substr(2, 9);
                            copiedData.times[newTimeId] = {
                                ...timeSlot
                            };
                            delete copiedData.times[newTimeId].id;
                        }
                    }

                    this.data[day.index] = copiedData;

                    const daySection = this.getDaySection(day.index);
                    if (!daySection) continue;

                    // Update toggle state
                    const toggle = daySection.querySelector('.toggle');
                    if (sourceData.isDisabled) {
                        removeClassEl('active', toggle);
                    } else {
                        addClassEl('active', toggle);
                    }

                    // Update UI
                    this.updateDayUI(day.index);
                    this.updateDayTimesDisplay(day.index);

                    // Update container classes based on new state
                    const timeSlotsContainer = daySection.querySelector('.time-slots-container');
                    if (Object.keys(copiedData.times).length > 0) {
                        addClassEl('has-slots', timeSlotsContainer);
                    } else {
                        removeClassEl('has-slots', timeSlotsContainer);
                    }

                    // If this day is currently selected, update its height
                    if (this.selectedDay === day.index.toString()) {
                        timeSlotsContainer.style.height = `${totalHeight + 40}px`; // Add padding
                    }
                }
            }

            // Save data immediately after copying
            await this.saveData();
        },
        showTimePickerPopup: function(dayIndex, existingTimeId = null) {
            const existingTime = existingTimeId ? this.data[dayIndex]?.times?.[existingTimeId] : null;
            const dayData = this.data[dayIndex];

            let defaultStart = this.times.default.start;
            let defaultEnd = this.times.default.end;

            if (dayData?.isDisabled && dayData.lastTimes) {
                defaultStart = dayData.lastTimes.start;
                defaultEnd = dayData.lastTimes.end;
            }

            let popupHtml = `
            <div class="availability-time-picker-popup">
                <div class="popup-header">${existingTime ? 'Edit Time' : 'Add Time'}</div>
                <div class="time-inputs">
                    <div class="time-input">
                        <label>Start Time</label>
                        <input type="time" class="start-time" value="${existingTime?.start || defaultStart}">
                    </div>
                    <div class="time-input">
                        <label>End Time</label>
                        <input type="time" class="end-time" value="${existingTime?.end || defaultEnd}">
                    </div>
                </div>
                <div class="popup-actions">
                    <button class="cancel-btn">Cancel</button>
                    <button class="save-btn">Save</button>
                </div>
            </div>
        `;

            const popupEl = document.createElement('div');
            addClassEl('availability-popup-overlay', popupEl);
            popupEl.innerHTML = popupHtml;
            document.body.appendChild(popupEl);

            const cancelBtn = popupEl.querySelector('.cancel-btn');
            const saveBtn = popupEl.querySelector('.save-btn');

            cancelBtn.addEventListener('click', () => {
                popupEl.remove();
            });

            saveBtn.addEventListener('click', () => {
                const startTime = popupEl.querySelector('.start-time').value;
                const endTime = popupEl.querySelector('.end-time').value;

                // Normalize and compare times
                const { normalizedStart, normalizedEnd } = this.normalizeTimeRange(startTime, endTime);

                if (!this.data[dayIndex]) {
                    this.data[dayIndex] = { times: {} };
                }

                // Handle overlapping times
                const newTime = { start: normalizedStart, end: normalizedEnd };
                const existingTimes = Object.values(this.data[dayIndex].times || {});
                const allTimes = [...existingTimes, newTime];
                const mergedTimes = this.mergeOverlappingTimes(allTimes);

                // Clear existing times and add merged times
                this.data[dayIndex].times = {};
                this.data[dayIndex].isAny = false;

                mergedTimes.forEach(time => {
                    const timeId = existingTimeId || this.generateTimeId();
                    this.data[dayIndex].times[timeId] = time;
                });

                this.updateDayUI(dayIndex);
                this.updateDayTimesDisplay(dayIndex);

                this.saveData();
                popupEl.remove();

                let daySection = this.getDaySection(dayIndex);

                addClassEl('has-slots', daySection.querySelector('.time-slots-container'));

                void daySection;

                this.openTimeSlots(daySection);
            });
        },
        normalizeTimeRange: function(startTime, endTime) {
            // Convert times to minutes since midnight for comparison
            const startMinutes = this.timeToMinutes(startTime);
            const endMinutes = this.timeToMinutes(endTime);

            // If end time is earlier than start time, swap them
            if (endMinutes < startMinutes) {
                return {
                    normalizedStart: endTime,
                    normalizedEnd: startTime
                };
            }

            return {
                normalizedStart: startTime,
                normalizedEnd: endTime
            };
        },
        timeToMinutes: function(timeString) {
            const [hours, minutes] = timeString.split(':').map(Number);
            return hours * 60 + minutes;
        },
        updateDayTimesDisplay: function(dayIndex) {
            const daySection = this.getDaySection(dayIndex);
            if (!daySection) return;

            const selectedTimesEl = daySection.querySelector('.selected-times');
            const dayData = this.data[dayIndex];
            const toggle = daySection.querySelector('.toggle');
            const isActive = toggle && elHasClass(toggle, 'active');

            // If toggle is off, always show "Not Available" regardless of other states
            if (!isActive) {
                selectedTimesEl.innerHTML = '<span class="not-available">Not Available</span>';
                return;
            }

            if (!dayData || (!dayData.times && !dayData.isAny)) {
                selectedTimesEl.innerHTML = '<span class="no-times">No times set</span>';
                return;
            }

            if (dayData.isAny) {
                selectedTimesEl.innerHTML = '<span class="any-time">Any Time</span>';
                return;
            }

            const timeSlots = Object.values(dayData.times || {});
            if (timeSlots.length === 0) {
                selectedTimesEl.innerHTML = '<span class="no-times">No times set</span>';
                return;
            }

            const timeStrings = timeSlots
                .sort((a, b) => a.start.localeCompare(b.start))
                .map(time => `<div class="selected-time">${this.formatTimeDisplay(time.start)} - ${this.formatTimeDisplay(time.end)}</div>`);

            selectedTimesEl.innerHTML = timeStrings.join('');
        },
        updateDayUI: function(dayIndex) {
            const daySection = this.getDaySection(dayIndex);
            const timeSlotsEl = daySection.querySelector('.time-slots');
            const timeSlotsContainer = daySection.querySelector('.time-slots-container');
            const dayData = this.data[dayIndex];

            // Clear existing time slots
            timeSlotsEl.innerHTML = '';

            // Handle "Any Time" case
            if (dayData?.isAny) {
                removeClassEl('has-slots', timeSlotsContainer);
                return;
            }

            // Handle regular time slots
            if (dayData?.times && Object.keys(dayData.times).length > 0) {
                addClassEl('has-slots', timeSlotsContainer);

                const sortedTimes = Object.entries(dayData.times)
                    .sort(([,a], [,b]) => a.start.localeCompare(b.start));

                const timeSlotsHtml = sortedTimes.map(([timeId, time]) => `
                <div class="time-slot" data-time-id="${timeId}">
                    <div class="time-range">${this.formatTimeDisplay(time.start)} - ${this.formatTimeDisplay(time.end)}</div>
                    <button class="delete-btn" title="Delete">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 355.8033 427.0013"><path d="M232.4016,154.7044c-5.5234,0-10,4.4766-10,10v189c0,5.5195,4.4766,10,10,10s10-4.4805,10-10v-189c0-5.5234-4.4766-10-10-10Z"/><path d="M114.4016,154.7044c-5.5234,0-10,4.4766-10,10v189c0,5.5195,4.4766,10,10,10s10-4.4805,10-10v-189c0-5.5234-4.4766-10-10-10Z"/><path d="M28.4016,127.1224v246.3789c0,14.5625,5.3398,28.2383,14.668,38.0508,9.2852,9.8398,22.207,15.4258,35.7305,15.4492h189.2031c13.5273-.0234,26.4492-5.6094,35.7305-15.4492,9.3281-9.8125,14.668-23.4883,14.668-38.0508V127.1224c18.543-4.9219,30.5586-22.8359,28.0781-41.8633-2.4844-19.0234-18.6914-33.2539-37.8789-33.2578h-51.1992v-12.5c.0586-10.5117-4.0977-20.6055-11.5391-28.0312C238.4212,4.0482,228.3118-.0846,217.8001.0013h-88.7969c-10.5117-.0859-20.6211,4.0469-28.0625,11.4688-7.4414,7.4258-11.5977,17.5195-11.5391,28.0312v12.5h-51.1992c-19.1875.0039-35.3945,14.2344-37.8789,33.2578-2.4805,19.0273,9.5352,36.9414,28.0781,41.8633ZM268.0032,407.0013H78.8001c-17.0977,0-30.3984-14.6875-30.3984-33.5v-245.5h250v245.5c0,18.8125-13.3008,33.5-30.3984,33.5ZM109.4016,39.5013c-.0664-5.207,1.9805-10.2188,5.6758-13.8945,3.6914-3.6758,8.7148-5.6953,13.9258-5.6055h88.7969c5.2109-.0898,10.2344,1.9297,13.9258,5.6055,3.6953,3.6719,5.7422,8.6875,5.6758,13.8945v12.5H109.4016v-12.5ZM38.2024,72.0013h270.3984c9.9414,0,18,8.0586,18,18s-8.0586,18-18,18H38.2024c-9.9414,0-18-8.0586-18-18s8.0586-18,18-18Z"/><path d="M173.4016,154.7044c-5.5234,0-10,4.4766-10,10v189c0,5.5195,4.4766,10,10,10s10-4.4805,10-10v-189c0-5.5234-4.4766-10-10-10Z"/></svg>
                    </button>
                </div>
            `).join('');

                timeSlotsEl.innerHTML = timeSlotsHtml;

                // Add delete handlers
                const deleteButtons = timeSlotsEl.querySelectorAll('.delete-btn');
                for (const btn of deleteButtons) {
                    if (btn._listener) continue;
                    btn._listener = true;

                    btn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        const timeSlot = btn.closest('.time-slot');
                        const timeId = timeSlot.getAttribute('data-time-id');
                        const timeSlotHeight = timeSlot.offsetHeight;

                        this.deleteTimeSlot(dayIndex, timeId);
                        timeSlot.remove();

                        requestAnimationFrame(() => {
                            this.openTimeSlots(daySection, timeSlotHeight + befriend.variables.filters_time_slot_gap);
                        });
                    });
                }
            } else {
                removeClassEl('has-slots', timeSlotsContainer);
            }
        },
        formatTimeDisplay: function(time) {
            const [hours, minutes] = time.split(':');
            const hr = parseInt(hours);
            const ampm = hr >= 12 ? 'pm' : 'am';
            const hr12 = hr % 12 || 12;
            return `${hr12}:${minutes} ${ampm}`;
        },
        deleteTimeSlot: function(dayIndex, timeId) {
            if (this.data[dayIndex]?.times?.[timeId]) {
                let daySection = this.getDaySection(dayIndex);
                let timeSlotsContainer = daySection.querySelector('.time-slots-container');

                delete this.data[dayIndex].times[timeId];

                if (Object.keys(this.data[dayIndex].times).length === 0) {
                    delete this.data[dayIndex];
                    removeClassEl('has-slots', timeSlotsContainer);
                }
                this.updateDayUI(dayIndex);
                this.updateDayTimesDisplay(dayIndex);
                this.saveData();
            }
        },
        generateTimeId: function() {
            return 'time_' + Math.random().toString(36).substr(2, 9);
        },
        doTimesOverlap: function(time1Start, time1End, time2Start, time2End) {
            const t1s = new Date(`2000/01/01 ${time1Start}`);
            const t1e = new Date(`2000/01/01 ${time1End}`);
            const t2s = new Date(`2000/01/01 ${time2Start}`);
            const t2e = new Date(`2000/01/01 ${time2End}`);

            return t1s < t2e && t2s < t1e;
        },
        mergeOverlappingTimes: function(times) {
            if (!times || times.length === 0) return [];

            // Sort times by start time
            const sortedTimes = times.sort((a, b) => a.start.localeCompare(b.start));
            const merged = [sortedTimes[0]];

            for (let i = 1; i < sortedTimes.length; i++) {
                const current = sortedTimes[i];
                const last = merged[merged.length - 1];

                if (this.doTimesOverlap(last.start, last.end, current.start, current.end)) {
                    // Merge the times
                    last.end = current.end > last.end ? current.end : last.end;
                } else {
                    merged.push(current);
                }
            }

            return merged;
        },
        openTimeSlots: async function(daySection, minusPixels = 0, autoScrollIfNotVisible) {
            const container = daySection.querySelector('.time-slots-container');
            addClassEl('selected', daySection);

            let setHeight = container.scrollHeight - minusPixels;
            container.style.height = `${setHeight}px`;

            if(autoScrollIfNotVisible) {
                await timeoutAwait(300)

                const filterSection = befriend.els.filters
                    .querySelector('.section.availability')
                    .querySelector('.filter-option');

                const dayRect = daySection.getBoundingClientRect();
                const filterRect = filterSection.getBoundingClientRect();
                const containerRect = container.getBoundingClientRect();

                // Calculate vertical positions relative to the viewport
                const dayBottom = dayRect.bottom;
                const filterBottom = filterRect.bottom;

                // Check if the day section is below the filter section
                if (dayBottom > filterBottom) {
                    // Calculate the scroll amount needed
                    const scrollAmount = dayBottom - filterBottom + 10;

                    // Scroll the container, not the filter section
                    filterSection.scrollBy({
                        top: scrollAmount,
                        behavior: 'smooth'
                    });
                }
            }
        },
        closeTimeSlots: function(daySection) {
            if (!daySection) return;
            const container = daySection.querySelector('.time-slots-container');
            removeClassEl('selected', daySection);
            container.style.height = '0';
        },
        setData() {
            try {
                const filter_data = befriend.filters.data.filters?.['availability'];

                // Initialize toggles and displays for each day
                for (const day of this.days) {
                    const daySection = this.getDaySection(day.index);
                    if (!daySection) continue;

                    const toggle = daySection.querySelector('.toggle');
                    const timeSlotsContainer = daySection.querySelector('.time-slots-container');

                    // Set initial toggle state and container display
                    const dayRecords = Object.values(filter_data?.items || {}).filter(
                        record => record.day_of_week === day.index
                    );

                    // Find the day-level record
                    const dayLevelRecord = dayRecords.find(record => record.is_day);

                    if (dayLevelRecord) {
                        // Initialize day data structure
                        this.data[day.index] = {
                            isDisabled: !dayLevelRecord.is_active,
                            isAny: dayLevelRecord.is_any_time,
                            times: {}
                        };

                        // Process time slots only if not "Any Time"
                        if (!dayLevelRecord.is_any_time) {
                            const timeRecords = dayRecords.filter(record => !record.is_day);
                            for(let record of timeRecords) {
                                const timeId = record.id;
                                this.data[day.index].times[timeId] = {
                                    start: record.start_time?.slice(0, 5),
                                    end: record.end_time?.slice(0, 5)
                                };
                            }
                        }

                        if (dayLevelRecord.is_active) {
                            addClassEl('active', toggle);
                        } else {
                            removeClassEl('active', toggle);
                        }
                    } else {
                        // Default to active if no day record exists
                        addClassEl('active', toggle);
                        timeSlotsContainer.style.display = '';
                        this.data[day.index] = {
                            isDisabled: false,
                            isAny: false,
                            times: {}
                        };
                    }

                    this.updateDayUI(day.index);
                    this.updateDayTimesDisplay(day.index);
                }
            } catch (e) {
                console.error('Error loading availability data:', e);
            }
        },
        updateIds: function(idMapping) {
            for (let dayIndex in this.data) {
                const dayData = this.data[dayIndex];

                if (dayData.times) {
                    const updatedTimes = {};
                    for (let [oldId, timeSlot] of Object.entries(dayData.times)) {
                        const newId = idMapping[oldId] || oldId;
                        updatedTimes[newId] = {
                            ...timeSlot,
                            id: newId
                        };

                        const timeSlotEl = befriend.els.filters.querySelector(`[data-time-id="${oldId}"]`);
                        if (timeSlotEl) {
                            timeSlotEl.setAttribute('data-time-id', newId);
                        }
                    }

                    dayData.times = updatedTimes;
                }
            }
        },
        async saveData() {
            try {
                const availabilityData = {};
                for (const [dayIndex, dayData] of Object.entries(this.data)) {
                    availabilityData[dayIndex] = {
                        isDisabled: dayData.isDisabled || false,
                        isAny: dayData.isAny || false,
                        times: dayData.times || {}
                    };
                }

                let response = await befriend.auth.put('/filters/availability', {
                    availability: availabilityData
                });

                if (response?.data?.idMapping) {
                    this.updateIds(response.data.idMapping);
                }
            } catch (e) {
                console.error('Error saving availability data:', e);
            }
        }
    },
    modes: {
        items: [
            {
                id: 'solo',
                label: 'Solo',
                icon: `
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 432.1641 512">
                  <path d="M210.3516,246.6328c33.8828,0,63.2188-12.1523,87.1953-36.1289,23.9688-23.9727,36.125-53.3047,36.125-87.1914s-12.1523-63.2109-36.1289-87.1914C273.5664,12.1523,244.2305,0,210.3516,0s-63.2188,12.1523-87.1914,36.125-36.1289,53.3086-36.1289,87.1875,12.1562,63.2227,36.1289,87.1953c23.9805,23.9688,53.3164,36.125,87.1914,36.125ZM144.3789,57.3398c18.3945-18.3945,39.9727-27.3359,65.9727-27.3359s47.5781,8.9414,65.9766,27.3359c18.3945,18.3984,27.3398,39.9805,27.3398,65.9727s-8.9453,47.5781-27.3398,65.9766c-18.3984,18.3984-39.9805,27.3398-65.9766,27.3398s-47.5703-8.9453-65.9727-27.3398c-18.3984-18.3945-27.3438-39.9766-27.3438-65.9766s8.9453-47.5742,27.3438-65.9727Z" fill="black"/>
                  <circle cx="210.3516" cy="123.3125" r="66" fill="white"/>
                  
                  <path d="M426.1289,393.7031c-.6914-9.9766-2.0898-20.8594-4.1484-32.3516-2.0781-11.5781-4.7539-22.5234-7.957-32.5273-3.3125-10.3398-7.8086-20.5508-13.375-30.3359-5.7695-10.1562-12.5508-19-20.1602-26.2773-7.957-7.6133-17.6992-13.7344-28.9648-18.1992-11.2266-4.4414-23.668-6.6914-36.9766-6.6914-5.2266,0-10.2812,2.1445-20.043,8.5-6.0078,3.918-13.0352,8.4492-20.8789,13.4609-6.707,4.2734-15.793,8.2773-27.0156,11.9023-10.9492,3.543-22.0664,5.3398-33.043,5.3398-10.9688,0-22.0859-1.7969-33.043-5.3398-11.2109-3.6211-20.3008-7.625-26.9961-11.8984-7.7695-4.9648-14.8008-9.4961-20.8984-13.4688-9.7539-6.3555-14.8086-8.5-20.0352-8.5-13.3125,0-25.75,2.2539-36.9727,6.6992-11.2578,4.457-21.0039,10.5781-28.9688,18.1992-7.6094,7.2812-14.3906,16.1211-20.1562,26.2734-5.5586,9.7852-10.0586,19.9922-13.3711,30.3398-3.1992,10.0039-5.875,20.9453-7.9531,32.5234-2.0625,11.4766-3.457,22.3633-4.1484,32.3633-.6797,9.7773-1.0234,19.9531-1.0234,30.2344,0,26.7266,8.4961,48.3633,25.25,64.3203,16.5469,15.7461,38.4375,23.7305,65.0664,23.7305h246.5312c26.6211,0,48.5117-7.9844,65.0625-23.7305,16.7578-15.9453,25.2539-37.5898,25.2539-64.3242-.0039-10.3164-.3516-20.4922-1.0352-30.2422Z" fill="black"/>
                  <path d="M381.2227,466.5312c-10.9336,10.4062-25.4492,15.4648-44.3789,15.4648H90.3164c-18.9336,0-33.4492-5.0586-44.3789-15.4609-10.7227-10.207-15.9336-24.1406-15.9336-42.5859,0-9.5938.3164-19.0664.9492-28.1602.6172-8.9219,1.8789-18.7227,3.75-29.1367,1.8477-10.2852,4.1992-19.9375,6.9961-28.6758,2.6836-8.3789,6.3438-16.6758,10.8828-24.668,4.332-7.6172,9.3164-14.1523,14.8164-19.418,5.1445-4.9258,11.6289-8.957,19.2695-11.9805,7.0664-2.7969,15.0078-4.3281,23.6289-4.5586,1.0508.5586,2.9219,1.625,5.9531,3.6016,6.168,4.0195,13.2773,8.6055,21.1367,13.625,8.8594,5.6484,20.2734,10.75,33.9102,15.1523,13.9414,4.5078,28.1602,6.7969,42.2734,6.7969s28.3359-2.2891,42.2695-6.793c13.6484-4.4102,25.0586-9.5078,33.9297-15.1641,8.043-5.1406,14.9531-9.5938,21.1211-13.6172,3.0312-1.9727,4.9023-3.043,5.9531-3.6016,8.625.2305,16.5664,1.7617,23.6367,4.5586,7.6367,3.0234,14.1211,7.0586,19.2656,11.9805,5.5,5.2617,10.4844,11.7969,14.8164,19.4219,4.543,7.9883,8.207,16.2891,10.8867,24.6602,2.8008,8.75,5.1562,18.3984,7,28.6758,1.8672,10.4336,3.1328,20.2383,3.75,29.1445v.0078c.6367,9.0586.957,18.5273.9609,28.1484-.0039,18.4492-5.2148,32.3789-15.9375,42.582Z" fill="white"/>
                </svg>`
            },
            {
                id: 'partner',
                label: 'Partner',
                icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 520 356.198">
                          <path d="M133,184c-50.8102,0-92-41.1898-92-92S82.1898,0,133,0s92,41.1898,92,92c-.0584,50.786-41.214,91.9416-92,92ZM133,20c-39.7645,0-72,32.2355-72,72s32.2355,72,72,72,72-32.2355,72-72c-.0441-39.7462-32.2538-71.9559-72-72Z" fill="black"/>
                          <circle cx="133" cy="92" r="72" fill="white"/>
                          
                          <path d="M256,356.198H10C4.4772,356.198,0,351.7209,0,346.198v-49.2c0-73.4539,59.5461-133,133-133s133,59.5461,133,133v49.2c0,5.5229-4.4771,10-10,10ZM20,336.198h226v-39.2c0-62.4082-50.5918-113-113-113s-113,50.5918-113,113v39.2Z" fill="black"/>
                          <path d="M20,336.198h226v-39.2c0-62.4082-50.5918-113-113-113s-113,50.5918-113,113v39.2Z" fill="white"/>
                          
                          <path d="M379,184c-50.8102,0-92-41.1898-92-92S328.1898,0,379,0s92,41.1898,92,92c-.0584,50.786-41.214,91.9416-92,92ZM379,20c-39.7645,0-72,32.2355-72,72s32.2355,72,72,72,72-32.2355,72-72c-.0441-39.7462-32.2538-71.9559-72-72Z" fill="black"/>
                          <circle cx="379" cy="92" r="72" fill="white"/>
                          
                          <path d="M502,356.198h-246c-5.5228,0-10-4.4771-10-10v-49.2c0-73.4539,59.5461-133,133-133s133,59.5461,133,133v49.2c0,5.5229-4.4771,10-10,10ZM266,336.198h226v-39.2c0-62.4082-50.5918-113-113-113s-113,50.5918-113,113v39.2Z" fill="black"/>
                          <path d="M266,336.198h226v-39.2c0-62.4082-50.5918-113-113-113s-113,50.5918-113,113v39.2Z" fill="white"/>
                        </svg>`
            },
            {
                id: 'kids',
                label: 'Kids',
                icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1730.5023 1807.73">
                          <circle cx="663.44" cy="391.73" r="177.07" fill="white" stroke="#000" stroke-width="45" stroke-miterlimit="10"/>
                          <path d="M786.63,691.99h-330.04c-80.47,0-145.71,65.24-145.71,145.71v314.7499c0,60.34,48.92,109.26,109.26,109.26h50.16v445.97c0,42.83,34.72,77.55,77.55,77.55h888.31c42.83,0,77.55-34.72,77.55-77.55v-245.8" fill="white" stroke="#000" stroke-width="45" stroke-miterlimit="10"/>
                          
                          <path d="M663.44,1785.22v-392.64" fill="none" stroke="#000" stroke-width="45" stroke-miterlimit="10"/>
                          <path d="M470.29,1261.7v-369.54" fill="none" stroke="#000" stroke-width="45" stroke-miterlimit="10"/>
                          
                          <circle cx="1340.9399" cy="453.32" r="153.98" fill="white" stroke="#000" stroke-width="45" stroke-miterlimit="10"/>
                          <path d="M1248.5601,738.18h247.64c71.17,0,132.72,49.57,147.89,119.1l42.24,193.61c13.41,61.4399-24.9399,122.28-86.16,136.6801l-20.5699,4.84" fill="white" stroke="#000" stroke-width="45" stroke-miterlimit="10"/>
                          <path d="M1510.3199,922.95l107.09,535.43c.36,1.8101-1.02,3.49-2.86,3.49h-436.41" fill="white" stroke="#000" stroke-width="45" stroke-miterlimit="10"/>
                          
                          <circle cx="1009.89" cy="684.29" r="115.48" fill="white" stroke="#000" stroke-width="45" stroke-miterlimit="10"/>
                          <path d="M863.61,1107.72l4.76,677.5" fill="none" stroke="#000" stroke-width="45" stroke-miterlimit="10"/>
                          <path d="M1178.13,1785.22v-677.5" fill="none" stroke="#000" stroke-width="45" stroke-miterlimit="10"/>
                          <path d="M863.61,1336.65h-32.61c-52.15,0-94.42-42.28-94.42-94.42v-165.53c0-84.91,68.84-153.75,153.75-153.75h258.3699c84.91,0,153.75,68.84,153.75,153.75v165.53c0,52.15-42.28,94.42-94.42,94.42h-32.61" fill="white" stroke="#000" stroke-width="45" stroke-miterlimit="10"/>
                          
                          <path d="M1349.77,1785.22v-323.35" fill="none" stroke="#000" stroke-width="45" stroke-miterlimit="10"/>
                          <path d="M1019.52,1785.22v-308.63" fill="none" stroke="#000" stroke-width="45" stroke-miterlimit="10"/>
                        </svg>`
            }
        ],
        data: {
            selectedModes: ['solo']  // Default selection
        },
        init: function() {
            let section = befriend.filters.sections.modes;

            const section_el = befriend.els.filters.querySelector(`.section.${section.token}`);
            const filter_options = section_el.querySelector('.filter-options');

            // Get stored filter values if they exist
            const filter_data = befriend.filters.data.filters?.['modes'];

            if (filter_data?.items) {
                this.data.selectedModes = Object.values(filter_data.items)
                    .filter(item => !item.is_negative)
                    .map(item => item.mode_token);
            }

            const modesHtml = this.items.map(mode => {
                const isSelected = this.data.selectedModes.includes(mode.id);
                return `
                <button class="mode-button ${mode.id} ${isSelected ? 'selected' : ''}" data-mode="${mode.id}">
                    ${mode.icon}
                    <span class="name">${mode.label}</span>
                </button>
            `;
            }).join('');

            filter_options.innerHTML = `
            <div class="filter-option" data-filter-token="${section.token}">
                ${befriend.filters.sendReceiveHtml(true, true, true)}
                <div class="modes-buttons">
                    ${modesHtml}
                </div>
            </div>
        `;

            this.initEvents(section_el);
        },

        initEvents: function(section_el) {
            const modeButtons = section_el.querySelectorAll('.mode-button');

            for (let button of modeButtons) {
                if (button._listener) continue;
                button._listener = true;

                button.addEventListener('click', async (e) => {
                    e.preventDefault();
                    e.stopPropagation();

                    const modeId = button.getAttribute('data-mode');
                    const wasSelected = elHasClass(button, 'selected');

                    // Don't allow deselecting if it's the only selected mode
                    if (wasSelected && this.data.selectedModes.length <= 1) {
                        return;
                    }

                    try {
                        // Optimistically update UI
                        if (wasSelected) {
                            removeClassEl('selected', button);
                            this.data.selectedModes = this.data.selectedModes.filter(id => id !== modeId);
                        } else {
                            addClassEl('selected', button);
                            this.data.selectedModes.push(modeId);
                        }

                        // Save to server
                        await befriend.auth.put('/filters/modes', {
                            mode_token: modeId,
                            active: !wasSelected
                        });
                    } catch (e) {
                        console.error('Error updating modes filter:', e);

                        // Revert UI state on error
                        if (wasSelected) {
                            addClassEl('selected', button);
                            this.data.selectedModes.push(modeId);
                        } else {
                            removeClassEl('selected', button);
                            this.data.selectedModes = this.data.selectedModes.filter(id => id !== modeId);
                        }
                    }
                });
            }
        }
    },
    reviews: {
        min: 0,
        max: 5,
        precision: 10,
        ratings: {
            safety: {
                token: 'reviews_safety',
                name: 'Safety',
                current_rating: 4.5,
            },
            trust: {
                token: 'reviews_trust',
                name: 'Trust',
                current_rating: 4.5,
            },
            timeliness: {
                token: 'reviews_timeliness',
                name: 'Timeliness',
                current_rating: 4.5,
            },
            friendliness: {
                token: 'reviews_friendliness',
                name: 'Friendliness',
                current_rating: 4.5,
            },
            fun: {
                token: 'reviews_fun',
                name: 'Fun',
                current_rating: 4.5,
            },
        },
        init: function () {
            let section = befriend.filters.sections.reviews;

            const section_el = befriend.els.filters.querySelector(`.section.${section.token}`);
            const filter_options = section_el.querySelector('.filter-options');

            let reviewsHtml = '';

            reviewsHtml += `
            <div class="filter-option include-new" data-filter-token="reviews_unrated">
                ${befriend.filters.sendReceiveHtml(true, true)}

                <div class="filter-option-name">
                    ${toggleHtml(true, null, 'toggle-24')}
                    <div class="name">Include unrated matches</div>
                </div>
            </div>`;

            //star ratings
            for (let [key, rating] of Object.entries(this.ratings)) {
                const filter_data = befriend.filters.data.filters?.[rating.token];
                if (filter_data?.filter_value) {
                    rating.current_rating = parseFloat(filter_data.filter_value);
                }

                const isActive = !filter_data || filter_data.is_active;

                reviewsHtml += `
                    <div class="filter-option review review-${key}" data-filter-token="${rating.token}">
                        ${befriend.filters.sendReceiveHtml(true, true)}
                        
                        <div class="toggle-wrapper">
                                ${toggleHtml(true, isActive ? 'On' : 'Off', 'toggle-24')}
                        </div>
                            
                        <div class="filter-option-name">
                            <div class="name">
                                ${rating.name}
                            </div>
                            
                            <div class="rating-display">
                                <div class="value">${rating.current_rating}</div>
                            </div>
                        </div>
                        
                        <div class="stars">
                            <div class="stars-container">
                                ${Array(5)
                                    .fill()
                                    .map(
                                        () => `
                                    <div class="star-container">
                                        <svg class="outline" viewBox="0 0 24 24">
                                            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                                        </svg>
                                        <svg class="fill" viewBox="0 0 24 24">
                                            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                                        </svg>
                                    </div>
                                `,
                                    )
                                    .join('')}
                            </div>
                            
                            
                            <div class="range-container">
                                <div class="sliders-control">
                                    <div class="slider-track"></div>
                                    <div class="slider-range"></div>
                                    <div class="thumb">
                                        <span class="thumb-inner"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }

            filter_options.innerHTML = reviewsHtml;

            this.initEvents(section_el);
        },
        initEvents: function(section_el) {
            const self = this;
            const precision = this.precision;
            const reviewFilters = section_el.querySelectorAll('.filter-option.review');

            for (let section of reviewFilters) {
                const type = Array.from(section.classList)
                    .find((cls) => cls.startsWith('review-'))
                    ?.replace('review-', '');

                if (!type || !this.ratings[type]) continue;

                const stars = section.querySelectorAll('.star-container');
                const display = section.querySelector('.rating-display');

                // Slider elements
                const container = section.querySelector('.sliders-control');
                const range = section.querySelector('.slider-range');
                const thumb = section.querySelector('.thumb');
                let isDragging = false;
                let startX, startLeft;

                function setPosition(value) {
                    if (typeof value !== 'number' || isNaN(value)) {
                        value = 0;
                    }
                    const percent = value / self.max;
                    // Use getBoundingClientRect() for more accurate width
                    const width = container.getBoundingClientRect().width;
                    const position = percent * width;
                    thumb.style.left = `${position}px`;
                    range.style.width = `${position}px`;
                    // thumb.querySelector('.thumb-value').textContent = value.toFixed(1);
                }

                function getValueFromPosition(position) {
                    // Use getBoundingClientRect() for more accurate width
                    const width = container.getBoundingClientRect().width;
                    const percent = position / width;
                    const value = percent * self.max;
                    return Math.min(Math.max(value, self.min), self.max);
                }

                const updateRating = (rating, skip_save) => {
                    rating = Math.max(0, Math.min(5, rating));

                    // Update stars
                    for (let i = 0; i < stars.length; i++) {
                        const fill = stars[i].querySelector('.fill');
                        const fillPercentage = Math.max(0, Math.min(100, (rating - i) * 100));

                        fill.style.removeProperty('fill');
                        fill.style.removeProperty('color');

                        if (fillPercentage === 0) {
                            fill.style.fill = 'transparent';
                        } else if (fillPercentage === 100) {
                            fill.style.fill = befriend.variables.brand_color_a;
                            fill.style.removeProperty('clip-path');
                        } else {
                            fill.style.fill = befriend.variables.brand_color_a;
                            fill.style.clipPath = `polygon(0 0, ${fillPercentage}% 0, ${fillPercentage}% 100%, 0 100%)`;
                        }
                    }

                    // Update slider position and display
                    setPosition(rating);
                    display.querySelector('.value').innerHTML = rating.toFixed(1);
                    self.ratings[type].current_rating = rating;

                    if (!skip_save) {
                        self.saveRating(type, rating);
                    }
                };

                function handleStart(e) {
                    isDragging = true;
                    startX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
                    // Use getBoundingClientRect() for accurate position
                    const thumbRect = thumb.getBoundingClientRect();
                    const containerRect = container.getBoundingClientRect();
                    startLeft = thumbRect.left - containerRect.left;
                    e.preventDefault();
                }

                function handleMove(e) {
                    if (!isDragging) return;

                    const clientX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
                    const containerRect = container.getBoundingClientRect();
                    const position = clientX - containerRect.left;
                    const value = getValueFromPosition(position);
                    const roundedValue = Math.round(value * precision) / precision; // Round to nearest 0.1
                    updateRating(roundedValue);
                }

                function handleEnd() {
                    isDragging = false;
                }

                function handleTrackClick(e) {
                    if (isDragging) return; // Prevent click while dragging

                    const rect = container.getBoundingClientRect();
                    const clickPosition = e.clientX - rect.left;
                    const value = getValueFromPosition(clickPosition);
                    const roundedValue = Math.round(value * precision) / precision;
                    updateRating(roundedValue);
                }

                // Star events
                for (let i = 0; i < stars.length; i++) {
                    const star = stars[i];

                    star.addEventListener('touchstart', (e) => {
                        e.preventDefault();

                        const updateStarRating = (event) => {
                            const touch = event.touches[0];
                            const rect = star.getBoundingClientRect();
                            const x = touch.clientX - rect.left;
                            const width = rect.width;
                            const percentage = Math.max(0, Math.min(1, x / width));
                            const rating = i + percentage;
                            updateRating(rating);
                        };

                        updateStarRating(e);

                        const onTouchMove = (event) => {
                            event.preventDefault();
                            updateStarRating(event);
                        };

                        const onTouchEnd = () => {
                            document.removeEventListener('touchmove', onTouchMove);
                            document.removeEventListener('touchend', onTouchEnd);
                        };

                        document.addEventListener('touchmove', onTouchMove);
                        document.addEventListener('touchend', onTouchEnd);
                    });
                }

                thumb.addEventListener('mousedown', handleStart);
                document.addEventListener('mousemove', handleMove);
                document.addEventListener('mouseup', handleEnd);

                // Touch events
                thumb.addEventListener('touchstart', handleStart);
                document.addEventListener('touchmove', handleMove);
                document.addEventListener('touchend', handleEnd);

                // Track click event
                container.addEventListener('click', handleTrackClick);

                // Initialize with current rating
                requestAnimationFrame(() => {
                    const currentRating = self.ratings[type].current_rating;
                    updateRating(currentRating, true);
                });
            }
        },
        saveRating: function(type, rating) {
            if (!this._debounceTimers) {
                this._debounceTimers = {};
            }

            if (this._debounceTimers[type]) {
                clearTimeout(this._debounceTimers[type]);
            }

            this._debounceTimers[type] = setTimeout(async () => {
                try {
                    const filter_token = this.ratings[type].token;

                    await befriend.auth.put('/filters/reviews', {
                        filter_token,
                        rating: parseFloat(rating)
                    });
                } catch (e) {
                    console.error(`Error saving ${type} rating:`, e);
                }
            }, 500);
        }
    },
    age: {
        min: 18,
        max: 130,
        current: {
            min: 18,
            max: 100
        },
        minGap: 2,
        _updateTimer: null,
        init: function() {
            let self = this;

            let section = befriend.filters.sections.ages;

            const section_el = befriend.els.filters.querySelector(`.section.${section.token}`);
            const filter_options = section_el.querySelector('.filter-options');

            // Get stored filter values if they exist
            const filter_data = befriend.filters.data.filters?.['ages'];
            if (filter_data?.filter_value_min && filter_data?.filter_value_max) {
                this.current.min = parseInt(filter_data.filter_value_min);
                this.current.max = parseInt(filter_data.filter_value_max);

                // Ensure loaded values respect the minimum gap
                if (this.current.max - this.current.min < this.minGap) {
                    this.current.max = this.current.min + this.minGap;

                    if(this.current.max > this.max) {
                        this.current.max = this.max;
                        this.current.min = this.max - this.minGap;
                    }
                }
            }

            const ageHtml = `
                 <div class="filter-option age-range" data-filter-token="${section.token}">
                    ${befriend.filters.sendReceiveHtml(true, true, true)}
                    
                    <div class="range-container">
                        <div class="sliders-control">
                            <div class="slider-track"></div>
                            <div class="slider-range"></div>
                            <div class="thumb min-thumb">
                                <span class="thumb-value"></span>
                            </div>
                            <div class="thumb max-thumb">
                                <span class="thumb-value"></span>
                            </div>
                        </div>
                    </div>
                </div>`;

            filter_options.innerHTML = ageHtml;

            // Get elements after they're added to DOM
            const container = section_el.querySelector('.sliders-control');
            const range = section_el.querySelector('.slider-range');
            const minThumb = section_el.querySelector('.min-thumb');
            const maxThumb = section_el.querySelector('.max-thumb');

            let isDragging = null;
            let startX, startLeft;

            function setPosition(thumb, value) {
                const percent = (value - self.min) / (self.max - self.min);
                const position = percent * container.offsetWidth;
                thumb.style.left = `${position}px`;
                thumb.querySelector('.thumb-value').textContent = Math.round(value);
            }

            function updateRange() {
                const minLeft = parseFloat(minThumb.style.left);
                const maxLeft = parseFloat(maxThumb.style.left);
                range.style.left = `${Math.min(minLeft, maxLeft)}px`;
                range.style.width = `${Math.abs(maxLeft - minLeft)}px`;
            }

            function getValueFromPosition(position) {
                const percent = position / container.offsetWidth;
                return Math.min(Math.max(percent * (self.max - self.min) + self.min, self.min), self.max);
            }

            function handleStart(e) {
                isDragging = this;
                startX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
                startLeft = parseFloat(this.style.left);
                e.preventDefault();
            }

            function handleMove(e) {
                if (!isDragging) return;

                const clientX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
                const dx = clientX - startX;
                const newLeft = Math.min(Math.max(0, startLeft + dx), container.offsetWidth);
                const value = getValueFromPosition(newLeft);

                if (isDragging === minThumb) {
                    // Ensure minimum thumb doesn't get closer than minGap to maximum thumb
                    const maxValue = self.current.max;
                    if (value <= maxValue - self.minGap) {
                        self.current.min = Math.round(value);
                        setPosition(minThumb, self.current.min);
                    }
                } else if (isDragging === maxThumb) {
                    // Ensure maximum thumb doesn't get closer than minGap to minimum thumb
                    const minValue = self.current.min;
                    if (value >= minValue + self.minGap) {
                        self.current.max = Math.round(value);
                        setPosition(maxThumb, self.current.max);
                    }
                }

                updateRange();
                self.debounceUpdateServer();
            }

            function handleEnd() {
                isDragging = null;
            }

            // Mouse events
            [minThumb, maxThumb].forEach(thumb => {
                thumb.addEventListener('mousedown', handleStart);
            });
            document.addEventListener('mousemove', handleMove);
            document.addEventListener('mouseup', handleEnd);

            // Touch events
            [minThumb, maxThumb].forEach(thumb => {
                thumb.addEventListener('touchstart', handleStart);
            });
            document.addEventListener('touchmove', handleMove);
            document.addEventListener('touchend', handleEnd);

            // Initialize positions
            requestAnimationFrame(function () {
                setPosition(minThumb, befriend.filters.age.current.min);
                setPosition(maxThumb, befriend.filters.age.current.max);
                updateRange();
            });
        },
        debounceUpdateServer: function() {
            clearTimeout(this._updateTimer);
            this._updateTimer = setTimeout(() => {
                this.saveAgeRange();
            }, 500);
        },

        saveAgeRange: async function() {
            try {
                await befriend.auth.put('/filters/age', {
                    min_age: this.current.min,
                    max_age: this.current.max
                });
            } catch(e) {
                console.error('Error saving age range:', e);
            }
        }
    },
    genders: {
        init: function() {
            let section = befriend.filters.sections.genders;

            const section_el = befriend.els.filters.querySelector(`.section.${section.token}`);
            const filter_options = section_el.querySelector('.filter-options');

            const filter_data = befriend.filters.data.filters?.['genders'];

            let gender_buttons_html = '';

            if (befriend.me.data.genders) {
                for (let gender of befriend.me.data.genders) {
                    let selected = '';

                    const matchingItem = filter_data?.items ?
                        Object.values(filter_data.items)
                            .find(item => item.gender_id === gender.id) : null;

                    // Item is selected if it exists and is not negative
                    if (matchingItem && !matchingItem.is_negative) {
                        selected = 'selected';
                    } else if (!filter_data?.items && gender.token === 'any') {
                        // Default to 'any' selected if no filter data exists yet
                        selected = 'selected';
                    }

                    gender_buttons_html += `
                        <div class="gender-button ${gender.token} ${selected}" data-gender-token="${gender.token}">
                            <div class="name">${gender.name}</div>
                        </div>`;
                }
            }

            let html = `
                <div class="filter-option" data-filter-token="${section.token}">
                    ${befriend.filters.sendReceiveHtml(true, true, true)}
                    
                    <div class="gender-buttons">
                        ${gender_buttons_html}
                    </div>
                </div>
            `;

            filter_options.innerHTML = html;

            this.initEvents(section_el);
        },
        initEvents: function(section_el) {
            const genderButtons = section_el.querySelectorAll('.gender-button');

            for (let button of genderButtons) {
                if (!button._listener) {
                    button._listener = true;

                    button.addEventListener('click', async function(e) {
                        e.preventDefault();
                        e.stopPropagation();

                        let genderToken = this.getAttribute('data-gender-token');
                        let isAny = genderToken === 'any';
                        const anyButton = section_el.querySelector('.gender-button[data-gender-token="any"]');
                        const wasSelected = elHasClass(this, 'selected');

                        // If selecting "Any", deselect all others
                        if (isAny && !wasSelected) {
                            for(let btn of genderButtons) {
                                if (btn !== this) {
                                    removeClassEl('selected', btn);
                                }
                            }
                        }
                        // If selecting a specific gender, deselect "Any"
                        else if (!isAny && !wasSelected) {
                            if (anyButton) {
                                removeClassEl('selected', anyButton);
                            }
                        }

                        toggleElClass(this, 'selected');

                        //switch to any if all three selected
                        let allSelected = true;

                        for(let btn of genderButtons) {
                            if(btn.getAttribute('data-gender-token') === 'any' && !wasSelected) {
                                continue;
                            }

                            if(!elHasClass(btn, 'selected')) {
                                allSelected = false;
                            }
                        }

                        if(allSelected) {
                            removeElsClass(genderButtons, 'selected');
                            genderToken = 'any';
                            isAny = true;
                            addClassEl('selected', anyButton);
                        }

                        try {
                            await befriend.auth.put('/filters/gender', {
                                gender_token: genderToken,
                                active: !wasSelected
                            });
                        } catch (e) {
                            console.error('Error updating gender filter:', e);

                            console.log({
                                wasSelected, isAny, genderToken
                            })
                            // Revert UI state on error
                            toggleElClass(this, 'selected');

                            if (isAny && !wasSelected) {
                                for(let btn of genderButtons) {
                                    if (btn !== this) {
                                        toggleElClass(btn, 'selected');
                                    }
                                }
                            }
                        }
                    });
                }
            }
        }
    },
    distance: {
        min: 1,
        max: 60,
        current: 20,
        unit: 'miles',
        _updateTimer: null,
        init: function() {
            let self = this;

            let section = befriend.filters.sections.distance;

            const section_el = befriend.els.filters.querySelector(`.section.${section.token}`);
            const filter_options = section_el.querySelector('.filter-options');

            // Get stored filter values if they exist
            const filter_data = befriend.filters.data.filters?.[section.token];

            if (filter_data?.filter_value) {
                this.current = parseInt(filter_data.filter_value);
            }

            const distanceHtml = `
                <div class="filter-option distance-range" data-filter-token="${section.token}">
                    ${befriend.filters.sendReceiveHtml(true, true, true)}
                    
                    <div class="filter-option-name">
                        <span class="name">Max distance <span class="miles-km">(miles)</span></span>
                    </div>
                    <div class="range-container">
                        <div class="sliders-control">
                            <div class="slider-track"></div>
                            <div class="slider-range"></div>
                            <div class="thumb">
                                <span class="thumb-value"></span>
                            </div>
                        </div>
                    </div>
                </div>`;

            filter_options.innerHTML = distanceHtml;

            const container = section_el.querySelector('.sliders-control');
            const range = section_el.querySelector('.slider-range');
            const thumb = section_el.querySelector('.thumb');

            let isDragging = false;
            let startX, startLeft;

            function setPosition(value) {
                const percent = (value - self.min) / (self.max - self.min);
                const position = percent * container.offsetWidth;
                thumb.style.left = `${position}px`;
                range.style.width = `${position}px`;
                thumb.querySelector('.thumb-value').textContent = Math.round(value);
            }

            function getValueFromPosition(position) {
                const percent = position / container.offsetWidth;
                return Math.min(Math.max(percent * (self.max - self.min) + self.min, self.min), self.max);
            }

            function handleStart(e) {
                isDragging = true;
                startX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
                startLeft = parseFloat(thumb.style.left);
                e.preventDefault();
            }

            function handleMove(e) {
                if (!isDragging) return;

                const clientX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
                const dx = clientX - startX;
                const newLeft = Math.min(Math.max(0, startLeft + dx), container.offsetWidth);
                const value = getValueFromPosition(newLeft);

                self.current = Math.round(value);
                setPosition(self.current);
                self.debounceUpdateServer();
            }

            function handleEnd() {
                isDragging = false;
            }

            function handleTrackClick(e) {
                const rect = container.getBoundingClientRect();
                const clickPosition = e.clientX - rect.left;
                const value = getValueFromPosition(clickPosition);

                self.current = Math.round(value);
                setPosition(self.current);
                self.debounceUpdateServer();
            }

            // Mouse events
            thumb.addEventListener('mousedown', handleStart);
            document.addEventListener('mousemove', handleMove);
            document.addEventListener('mouseup', handleEnd);

            // Touch events
            thumb.addEventListener('touchstart', handleStart);
            document.addEventListener('touchmove', handleMove);
            document.addEventListener('touchend', handleEnd);

            // Track click event
            container.addEventListener('click', handleTrackClick);

            // Initialize position
            requestAnimationFrame(function () {
                setPosition(self.current);
            });
        },

        debounceUpdateServer: function() {
            clearTimeout(this._updateTimer);
            this._updateTimer = setTimeout(() => {
                this.saveDistance();
            }, 500);
        },

        saveDistance: async function() {
            try {
                await befriend.auth.put('/filters/distance', {
                    distance: this.current
                });
            } catch(e) {
                console.error('Error saving distance:', e);
            }
        }
    },
    activity_types: {
        selected: {
            level_1: null,
            level_2: null,
            level_3: null,
        },
        init: function () {
            this.render();
            this.initEvents();
        },
        render: function () {
            let section = befriend.filters.sections.activityTypes;
            const section_el = befriend.els.filters.querySelector(`.section.${section.token}`);
            const filter_options = section_el.querySelector('.filter-options');
            const filter_data = befriend.filters.data.filters?.[section.token];

            let activities = befriend.activities.types.data;

            let html = ``;
            let level_1_html = ``;

            //create rows and add hidden placeholder row below each row for multi-level select
            let activities_row = [];

            let level_1_ids = Object.keys(activities);

            for (let i = 0; i < level_1_ids.length; i++) {
                let level_1_id = level_1_ids[i];

                if (activities_row.length === befriend.variables.filter_activity_row_items) {
                    let row_html = activities_row.join('');

                    level_1_html += `<div class="level_1_row">
                                            ${row_html}
                                        </div>`;
                    level_1_html += `<div class="level_2"></div>`;

                    activities_row.length = [];
                }

                let activity = activities[level_1_id];

                let image_html = ``;

                if (activity.image) {
                    image_html += `<div class="image">
                                        ${activity.image}
                                    </div>`;
                } else if (activity.emoji) {
                    // image_html += `<div class="emoji">
                    //                 ${activity.emoji}
                    //             </div>`;
                }

                let icon_html = ``;

                if (image_html) {
                    icon_html = `<div class="icon">${image_html}</div>`;
                }

                let center_class = icon_html ? '' : 'center';

                activities_row.push(`
                        <div class="activity level_1_activity" data-id="${level_1_id}">
                            <div class="activity_wrapper ${center_class}">
                                ${icon_html}
                                <div class="name">${activity.name}</div>
                            </div>
                        </div>
                    `);
            }

            if (activities_row.length) {
                let row_html = activities_row.join('');
                level_1_html += `<div class="level_1_row">
                                            ${row_html}
                                        </div>`;
                level_1_html += `<div class="level_2"></div>`;
            }

            html = `
                    <div class="level_1">${level_1_html}</div>
                `;

            filter_options.innerHTML = `<div class="filter-option" data-filter-token="${section.token}">
                                            ${befriend.filters.sendReceiveHtml(true, true, true)}
                                            <div class="activities-wrapper">
                                                ${html}
                                            </div>
                                        </div>`;

            let last_row = lastArrItem(
                section_el.getElementsByClassName('level_1_row'),
            );

            last_row.style.marginBottom = '0px';
        },
        initEvents: function () {
            this.level1();
        },
        updateLevelHeight: async function (level_num, skip_set_prev) {
            let level_el = befriend.els.filters.querySelector(`.level_${level_num}.show`);

            if (!level_el) {
                return;
            }

            let last_row = lastArrItem(level_el.getElementsByClassName(`level_${level_num}_row`));

            last_row.style.marginBottom = '0px';

            let level_height = await setElHeightDynamic(level_el, true);

            if (!skip_set_prev) {
                level_el.setAttribute('data-prev-height', `${level_height}px`);
            }

            level_el.style.height = `${level_height}px`;
        },
        level1: function () {
            let els = befriend.els.filters.getElementsByClassName('level_1_activity');

            for (let i = 0; i < els.length; i++) {
                let el = els[i];

                el.addEventListener('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    let parent_id = this.getAttribute('data-id');
                    let activity = befriend.activities.types.data[parent_id];

                    let level_2_el = this.closest('.level_1_row').nextSibling;

                    //remove activity selection and hide level 2 if same activity clicked
                    if (elHasClass(this, 'active')) {
                        removeClassEl('active', this);

                        hideLevel(level_2_el);

                        befriend.filters.activity_types.selected.level_1 = null;
                        befriend.filters.activity_types.selected.level_2 = null;
                        befriend.filters.activity_types.selected.level_3 = null;

                        return;
                    } else {
                        //remove active from any previously selected activity
                        removeElsClass(els, 'active');
                        addClassEl('active', this);
                        befriend.filters.activity_types.selected.level_1 = activity;
                        befriend.filters.activity_types.selected.level_2 = null;
                        befriend.filters.activity_types.selected.level_3 = null;
                    }

                    let prev_level_2 = befriend.els.filters.querySelector('.level_2.show');

                    //do not proceed if no sub categories
                    if (!activity.sub || !Object.keys(activity.sub).length) {
                        if (prev_level_2) {
                            hideLevel(prev_level_2);
                        }

                        return;
                    }

                    //hide other level 2s if different from this one
                    if (prev_level_2) {
                        if (prev_level_2 !== level_2_el) {
                            hideLevel(prev_level_2);
                            addClassEl('show', level_2_el);
                        }
                    } else {
                        addClassEl('show', level_2_el);
                    }

                    level_2_el.setAttribute('data-parent-id', parent_id);

                    let level_2_html = ``;

                    let activities_level_2 = [];

                    for (let level_2_id in activity.sub) {
                        if (
                            activities_level_2.length ===
                            befriend.variables.filter_activity_level_2_row_items
                        ) {
                            let row_html = activities_level_2.join('');

                            level_2_html += `<div class="level_2_row">
                                            ${row_html}
                                        </div>`;

                            level_2_html += `<div class="level_3"></div>`;

                            activities_level_2.length = [];
                        }

                        let activity = befriend.activities.types.data[parent_id].sub[level_2_id];

                        let image_html = '';

                        if (activity.image) {
                            image_html += `<div class="image">
                                        ${activity.image}
                                    </div>`;
                        } else if (activity.emoji) {
                            // image_html += `<div class="emoji">
                            //             ${activity.emoji}
                            //         </div>`;
                        }

                        let icon_html = ``;

                        if (image_html) {
                            icon_html = `<div class="icon">${image_html}</div>`;
                        }

                        let no_icon_class = icon_html ? '' : 'no_icon';

                        activities_level_2.push(`
                            <div class="activity level_2_activity" data-id="${level_2_id}">
                                <div class="activity_wrapper ${no_icon_class}">
                                    ${icon_html}
                                    <div class="name">${activity.name}</div>
                                </div>
                            </div>`);
                    }

                    if (activities_level_2.length) {
                        let row_html = activities_level_2.join('');
                        level_2_html += `<div class="level_2_row">
                                            ${row_html}
                                        </div>`;
                        level_2_html += `<div class="level_3"></div>`;
                    }

                    level_2_el.innerHTML = `<div class="level_2_container">
                                                ${level_2_html}
                                            </div>`;

                    befriend.filters.activity_types.updateLevelHeight(2);

                    befriend.filters.activity_types.level2();
                });
            }
        },
        level2: function () {
            let level_2_activity_els =
                befriend.els.filters.getElementsByClassName('level_2_activity');

            for (let i = 0; i < level_2_activity_els.length; i++) {
                let el = level_2_activity_els[i];

                el.addEventListener('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    let parent_id = this.closest('.level_2').getAttribute('data-parent-id');

                    let level_2_id = this.getAttribute('data-id');

                    let level_2_activity =
                        befriend.activities.types.data[parent_id].sub[level_2_id];

                    let level_3_el = this.closest('.level_2_row').nextSibling;

                    let closest_level_2_el = this.closest('.level_2');

                    let prev_height_level_2 = closest_level_2_el.getAttribute('data-prev-height');

                    //remove activity selection and hide level 3 if same activity clicked
                    if (elHasClass(this, 'active')) {
                        removeClassEl('active', this);

                        hideLevel(level_3_el);

                        closest_level_2_el.style.height = prev_height_level_2;

                        befriend.filters.activity_types.selected.level_2 = null;
                        befriend.filters.activity_types.selected.level_3 = null;

                        return;
                    } else {
                        //remove active from any previously selected activity
                        removeElsClass(level_2_activity_els, 'active');
                        addClassEl('active', this);
                        befriend.filters.activity_types.selected.level_2 = level_2_activity;
                        befriend.filters.activity_types.selected.level_3 = null;
                    }

                    let prev_level_3 = befriend.els.filters.querySelector('.level_3.show');

                    //do not proceed if no sub categories
                    if (!level_2_activity.sub || !Object.keys(level_2_activity.sub).length) {
                        if (prev_level_3) {
                            hideLevel(prev_level_3);
                        }

                        closest_level_2_el.style.height = prev_height_level_2;

                        return;
                    }

                    //hide other level 3s if different from this one
                    if (prev_level_3) {
                        if (prev_level_3 !== level_3_el) {
                            hideLevel(prev_level_3);
                            addClassEl('show', level_3_el);
                        }
                    } else {
                        addClassEl('show', level_3_el);
                    }

                    level_3_el.setAttribute('data-parent-id', parent_id);
                    level_3_el.setAttribute('data-level-2-id', level_2_id);

                    let level_3_html = ``;

                    let activities_level_3 = [];

                    for (let level_3_id in level_2_activity.sub) {
                        if (
                            activities_level_3.length ===
                            befriend.variables.filter_activity_level_3_row_items
                        ) {
                            let row_html = activities_level_3.join('');

                            level_3_html += `<div class="level_3_row">
                                            ${row_html}
                                        </div>`;

                            activities_level_3.length = [];
                        }

                        let activity =
                            befriend.activities.types.data[parent_id].sub[level_2_id].sub[
                                level_3_id
                                ];

                        let image_html = '';

                        if (activity.image) {
                            image_html += `<div class="image">
                                        ${activity.image}
                                    </div>`;
                        } else if (activity.emoji) {
                            // image_html += `<div class="emoji">
                            //             ${activity.emoji}
                            //         </div>`;
                        }

                        let icon_html = ``;

                        if (image_html) {
                            icon_html = `<div class="icon">${image_html}</div>`;
                        }

                        let no_icon_class = icon_html ? '' : 'no_icon';

                        activities_level_3.push(`
                            <div class="activity level_3_activity" data-id="${level_3_id}">
                                <div class="activity_wrapper ${no_icon_class}">
                                    ${icon_html}
                                    <div class="name">${activity.name}</div>
                                </div>
                            </div>`);
                    }

                    if (activities_level_3.length) {
                        let row_html = activities_level_3.join('');
                        level_3_html += `<div class="level_3_row">
                                            ${row_html}
                                        </div>`;
                    }

                    level_3_el.innerHTML = `<div class="level_3_container">
                                                ${level_3_html}
                                            </div>`;

                    befriend.filters.activity_types.updateLevelHeight(3);

                    requestAnimationFrame(function () {
                        befriend.filters.activity_types.updateLevelHeight(2, true);
                    });

                    befriend.filters.activity_types.level3();
                });
            }
        },
        level3: function () {
            let level_3_activity_els =
                befriend.els.filters.getElementsByClassName('level_3_activity');

            for (let i = 0; i < level_3_activity_els.length; i++) {
                let el = level_3_activity_els[i];

                el.addEventListener('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    let level_3_el = this.closest('.level_3');

                    let parent_id = level_3_el.getAttribute('data-parent-id');

                    let level_2_id = level_3_el.getAttribute('data-level-2-id');

                    let level_3_id = this.getAttribute('data-id');

                    let level_3_activity =
                        befriend.activities.types.data[parent_id].sub[level_2_id].sub[level_3_id];

                    //remove activity selection and hide level 3 if same activity clicked
                    if (elHasClass(this, 'active')) {
                        removeClassEl('active', this);
                        befriend.filters.activity_types.selected.level_3 = null;
                        // befriend.places.displayPlaces(befriend.filters.activity_types.selected.level_2);
                    } else {
                        //remove active from any previously selected activity
                        removeElsClass(level_3_activity_els, 'active');
                        addClassEl('active', this);
                        befriend.filters.activity_types.selected.level_3 = level_3_activity;
                    }
                });
            }
        },
    },
    initSections: async function () {
        let sections_el = befriend.els.filters.querySelector('.sections');

        let html = '';

        for (let key in this.sections) {
            let section = this.sections[key];

            let collapsed_class = this.data.collapsed[key] ? 'collapsed' : '';

            html += `<div class="section ${section.token} ${collapsed_class}" data-key="${key}">
                        <div class="section-top">
                            <div class="section-icon">${section.icon ? section.icon : ''}</div>
                            <div class="section-name">${section.name}</div>
                            
                            <div class="toggle-wrapper">
                                ${toggleHtml(true)}
                            </div>
                            
                            <div class="chevron">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 360.0005 192.001"><path id="Down_Arrow" d="M176.001,192.001c-4.092,0-8.188-1.564-11.312-4.688L4.689,27.313C-1.563,21.061-1.563,10.937,4.689,4.689s16.376-6.252,22.624,0l148.688,148.688L324.689,4.689c6.252-6.252,16.376-6.252,22.624,0s6.252,16.376,0,22.624l-160,160c-3.124,3.124-7.22,4.688-11.312,4.688h0Z"/></svg>
                            </div>
                        </div>
                        <div class="section-container">
                            <div class="filter-options"></div>
                        </div>
                    </div>`;
        }

        sections_el.innerHTML = html;

        requestAnimationFrame(this.updateSectionHeights);
    },
    initCollapsible: function () {
        let sections = befriend.els.filters.getElementsByClassName('section');

        for (let i = 0; i < sections.length; i++) {
            let section = sections[i];
            let section_top = section.querySelector('.section-top');
            let section_container = section.querySelector('.section-container');

            if (!section_top || section_top._listener) {
                continue;
            }

            section_top._listener = true;

            // Set initial height if not already set
            if (!section_container.style.height) {
                let is_collapsed = elHasClass(section, 'collapsed');
                if (is_collapsed) {
                    section_container.style.height = '0';
                } else {
                    setElHeightDynamic(section_container);
                }
            }

            section_top.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();

                let is_collapsed = elHasClass(section, 'collapsed');
                let section_key = this.getSectionKey(section);

                if (is_collapsed) {
                    removeClassEl('collapsed', section);
                    setElHeightDynamic(section_container);
                    delete this.data.collapsed[section_key];
                } else {
                    addClassEl('collapsed', section);
                    section_container.style.height = '0';
                    this.data.collapsed[section_key] = true;
                }

                // Save collapsed state to local storage
                befriend.user.setLocal('filters.collapsed', this.data.collapsed);
            });
        }
    },
    initSendReceive: function () {
        const sendReceiveElements = befriend.els.filters.querySelectorAll('.send-receive');

        for (let element of sendReceiveElements) {
            if (element._listener) continue;
            element._listener = true;

            const options = element.querySelectorAll('.option');

            for (let option of options) {
                option.addEventListener('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    // Toggle enabled class
                    this.classList.toggle('enabled');

                    // Get the filter type and option type
                    const filterOption = this.closest('.filter-option');
                    const filterToken = befriend.filters.getFilterToken(filterOption);
                    const optionType = this.classList.contains('send') ? 'send' : 'receive';

                    // Save the state
                    befriend.filters.saveSendReceiveState(
                        filterToken,
                        optionType,
                        this.classList.contains('enabled'),
                    );
                });
            }
        }
    },
    initActiveEvents: function () {
        const toggles = befriend.els.filters.querySelectorAll('.section-top .toggle, .filter-option .toggle');

        for (let toggle of toggles) {
            if (toggle._listener) continue;
            toggle._listener = true;

            toggle.addEventListener('click', async function (e) {
                e.preventDefault();
                e.stopPropagation();

                let filter_token;
                let section = this.closest('.section');
                let filter_option = this.closest('.filter-option');

                if (filter_option) {
                    filter_token = befriend.filters.getFilterToken(filter_option);
                } else if (section) {
                    filter_token = befriend.filters.sections[section.getAttribute('data-key')]?.token;
                }

                if (!filter_token) {
                    console.error('Could not find filter token');
                    return;
                }

                let active = !elHasClass(this, 'active');

                //toggle on/off label
                let toggle_label = filter_option?.querySelector('.toggle-label');

                if(toggle_label?.innerText) {
                    toggle_label.innerHTML = active ? 'On' : 'Off';
                }

                try {
                    if (active) {
                        addClassEl('active', this);
                    } else {
                        removeClassEl('active', this);
                    }

                    await befriend.auth.put('/filters/active', {
                        filter_token,
                        active,
                    });
                } catch (e) {
                    console.error('Error updating filter active state:', e);

                    // Revert UI state on error
                    if (active) {
                        removeClassEl('active', this);
                    } else {
                        addClassEl('active', this);
                    }
                }
            });
        }
    },
    updateSectionHeights: function (without_transition) {
        let sections_el = befriend.els.filters.querySelector('.sections');

        let sections = sections_el.getElementsByClassName('section');

        for (let section of sections) {
            let container = section.querySelector('.section-container');

            let is_collapsed = elHasClass(section, 'collapsed');

            if (without_transition) {
                container.style.transition = 'none';

                setTimeout(function () {
                    container.style.removeProperty('transition');
                }, befriend.variables.filters_section_transition_ms);
            }

            if (is_collapsed) {
                container.style.height = '0';
            } else {
                setElHeightDynamic(container);
            }
        }
    },
    getSectionKey: function (section_el) {
        return section_el.getAttribute('data-key');
    },
    getFilterToken: function (filterOption) {
        return filterOption.getAttribute('data-filter-token');
    },
    sendReceiveHtml: function (send_enabled, receive_enabled, position_corner) {
        return `<div class="send-receive ${position_corner ? 'position-corner' : ''}">
                    <div class="option send ${send_enabled ? 'enabled' : ''}">
                        <div class="icon">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 511.998 512.0029">
                                  <path d="M510.539,36.2574c7.1675-21.5056-13.29-41.9661-34.7956-34.7985L18.8108,153.7717c-25.6598,8.5523-24.8644,45.1188,1.1409,52.5476l222.2321,63.4978,63.4949,222.2321c7.4317,26.0082,43.9953,26.8036,52.5476,1.1409L510.539,36.2574Z" fill="black"/>
                                  <path d="M474.7157,56.7382l-142.5848,427.7544-63.373-221.7995L474.7157,56.7382ZM455.2626,37.285l-205.9548,205.9548L27.5111,179.8698,455.2626,37.285Z" fill="white"/>
                            </svg>
                        </div>
<!--                        <div class="text">Send</div>-->
                    </div>
                    <div class="option receive ${receive_enabled ? 'enabled' : ''}">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 426.6667 512">
                          <path d="M394.6667,448H32c-17.6427,0-32-14.3573-32-32,0-9.3653,4.0747-18.2187,11.2-24.32,33.6213-28.416,52.8-69.76,52.8-113.536v-64.8107c0-82.3467,66.9867-149.3333,149.3333-149.3333s149.3333,66.9867,149.3333,149.3333v64.8107c0,43.7973,19.1787,85.12,52.6293,113.3867,7.296,6.2507,11.3707,15.104,11.3707,24.4693,0,17.6427-14.336,32-32,32Z" fill="black"/>
                          
                          <path d="M213.3333,85.3333c-70.592,0-128,57.408-128,128v64.8107c0,50.0907-21.9307,97.344-60.1813,129.6853-2.4533,2.0907-3.8187,5.056-3.8187,8.1707,0,5.888,4.7787,10.6667,10.6667,10.6667h362.6667c5.888,0,10.6667-4.7787,10.6667-10.6667,0-3.1147-1.3653-6.08-3.7333-8.1066-38.3147-32.4053-60.2667-79.68-60.2667-129.7493v-64.8107c0-70.592-57.408-128-128-128h0Z" fill="white"/>
                          
                          <path d="M245.3333,89.1733c-5.888,0-10.6667-4.7787-10.6667-10.6667v-35.84c0-11.7547-9.5787-21.3333-21.3333-21.3333s-21.3333,9.5787-21.3333,21.3333v35.84c0,5.888-4.7787,10.6667-10.6667,10.6667s-10.6667-4.7573-10.6667-10.6667v-35.84c0-23.5307,19.136-42.6667,42.6667-42.6667s42.6667,19.136,42.6667,42.6667v35.84c0,5.9093-4.7787,10.6667-10.6667,10.6667Z" fill="black"/>
                          <path d="M213.3333,512c-41.1733,0-74.6667-33.4933-74.6667-74.6667,0-5.888,4.7787-10.6667,10.6667-10.6667s10.6667,4.7787,10.6667,10.6667c0,29.3973,23.936,53.3333,53.3333,53.3333s53.3333-23.936,53.3333-53.3333c0-5.888,4.7787-10.6667,10.6667-10.6667s10.6667,4.7787,10.6667,10.6667c0,41.1733-33.4933,74.6667-74.6667,74.6667Z" fill="black"/>
                        </svg>
<!--                        <div class="text">Receive</div>-->
                    </div>
                </div>`;
    },
    saveSendReceiveState: async function (filterToken, optionType, isEnabled) {
        if (!this.data.sendReceive) {
            this.data.sendReceive = {};
        }
        if (!this.data.sendReceive[filterToken]) {
            this.data.sendReceive[filterToken] = {};
        }

        // Save state
        this.data.sendReceive[filterToken][optionType] = isEnabled;

        try {
            await befriend.auth.put('/filters/send-receive', {
                filter_token: filterToken,
                type: optionType,
                enabled: isEnabled,
            });
        } catch (e) {
            console.error('Error updating filter send/receive state:', e);
        }
    },
    setActive: function () {
        for (let key in this.sections) {
            const section = this.sections[key];
            const sectionEl = befriend.els.filters.querySelector(`.section.${section.token}`);

            if (!sectionEl) continue;

            const sectionToggle = sectionEl.querySelector('.section-top .toggle');
            if (!sectionToggle) continue;

            // Check if we have filter data for this section
            const filterData = befriend.filters.data?.filters?.[section.token];

            if (filterData && !filterData.is_active) {
                removeClassEl('active', sectionToggle);
            } else {
                addClassEl('active', sectionToggle);
            }
        }

        // Handle individual filter option toggles
        let filterOptionToggles = befriend.els.filters.querySelectorAll('.filter-option .toggle');

        for (let toggle of filterOptionToggles) {
            //skip availability days
            if(toggle.closest('.day-section')) {
                continue;
            }

            let filterOptionEl = toggle.closest('.filter-option');
            if (!filterOptionEl) continue;

            let filterToken = befriend.filters.getFilterToken(filterOptionEl);
            if (!filterToken) continue;

            const filterData = befriend.filters.data?.filters?.[filterToken];

            // Skip send/receive toggles
            if (toggle.closest('.send-receive')) continue;

            if (filterData && !filterData.is_active) {
                removeClassEl('active', toggle);
            } else {
                addClassEl('active', toggle);
            }
        }
    },
    setSendReceive: function () {
        let filter_options = befriend.els.filters.getElementsByClassName('filter-option');

        for (let filter_option of filter_options) {
            let filter_token = befriend.filters.getFilterToken(filter_option);
            let filter_data = befriend.filters.data.filters?.[filter_token];

            if (!filter_data) {
                continue;
            }

            // Set send/receive states
            let send_receive = filter_option.querySelector('.send-receive');
            if (send_receive) {
                let send_option = send_receive.querySelector('.option.send');
                let receive_option = send_receive.querySelector('.option.receive');

                // Set send state
                if (send_option) {
                    if (!filter_data.is_send) {
                        removeClassEl('enabled', send_option);
                    }
                }

                // Set receive state
                if (receive_option) {
                    if (!filter_data.is_receive) {
                        removeClassEl('enabled', receive_option);
                    }
                }
            }
        }
    },
};
